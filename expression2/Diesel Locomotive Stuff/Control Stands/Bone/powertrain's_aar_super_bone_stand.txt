@name PowerTrain's AAR Super Bone Stand
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
@inputs MU_Master Pod:entity ControlStand:wirelink Number:string Horn1 Quill1 Horn2 Quill2 EmBrake BellToggle HEP_Notch Active RemoteControl 
@inputs UsingRearSeat HumpMultiplier Cutin EngineRun GenField FuelPump AuxSwitch1 AuxSwitch2 AuxSwitch3 GroundLights StepLights GaugeLights
@inputs MU2ASwitch MainRes EqualRes Cyl BrakePipe AirFlow Load1 MPH 
@outputs CtlTable:table CONSTANT RemoteMode KeySelUp KeySelDn 
#@outputs Bell Light Misc HeadlightF HeadlightR 
# ^ Broken outputs, WIP. Use PowerTrain's Control Stand Toggles E2 for these functions.
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
@persist NotchedThrottle NumThrottleNotches HasDynamics NotchedDynamics TransitionMode TransitionControlType AirBrakeMode LocoBrakeMode InitialReduction 
@persist Lock_26L Bleeding CTL_Version:string
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
@persist [Lever_ABEmergency Lever_ABEmergencyRecover Lever_ABSuppressionOn Lever_ABSuppressionOff Lever_ABMove Lever_ABNotch Lever_ABRelease]:string
@persist [Lever_Throttle Lever_ReverserFN Lever_ReverserNF Lever_ReverserNR Lever_ReverserRN Lever_ReverserF Lever_ReverserN Lever_ReverserB Lever_26L]:string
@persist [AirBrakeApply AirBrakeApplyInitial AirBrakeRelease AirBrakeApplyLoop AirBrakeApplyEnd Motor_F Motor_R Motor_DB]:string
@persist [LocoBrakeFull LocoBrakeReleaseHard LocoBrakeReleaseSoft LocoBrakeBailoff LocoBrakeBailoffEnd]:string
@persist [WarningHiss BellValveOn BellValveOff MiscSwitch HeadlightSwitch CutinSwitch]:string
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
@persist NQ Notch DNQ DynaNotch Dynamics TransitionQ RevQ ABQ HissQ LBQ LHissQ 
@persist ControlPrintOrder:array DriverQ Routing:table DriverOld:entity Controls:table Shift:string
@persist ReverserF ReverserB IncreaseThrottle DecreaseThrottle IncreaseDynamics DecreaseDynamics IncreaseTrainBrake DecreaseTrainBrake IncreaseLocoBrake  
@persist DecreaseLocoBrake HandBrake EmergencyBrake Sander SelectorUp SelectorDown KeySelUp KeySelDn
@persist SetReverser SetThrottle SetDynamics SetSelector SetBrakeNotch SetEqualRes SetLocoBrakeNotch SetLocoBrakePressure SetBleeding FeedPressure 
@persist FullReleaseCock WarningHissQ CS:entity
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
@persist AutoB:entity IndB:entity Panel:entity Gauge1:entity Gauge2:entity Gauge3:entity Gauge4:entity Gauge5:entity SandButton:entity BellButton:entity
@persist [Gauge1Skin Gauge2Skin AFMGaugeSkinA AFMGaugeSkinB AmmeterSkin SpeedometerSkin]:string
@persist Hjonker:entity HLFSwitch:entity HLRSwitch:entity
@persist RevBone ThrBone DynBone TBBone LBBone LBLever HornBone BellBone SanderBone Red1 Red2 Wht1 Wht2 AFM AFM_M Load MPHBone 
@persist CutSw CutSw2 EngRunBone GenFieldBone FuelPumpBone AuxSwitch1Bone AuxSwitch2Bone AuxSwitch3Bone GroundLightsBone StepLightsBone GaugeLightsBone
@persist MU2ASwitchBone HLF HLR SelBone SelWhlBone ThrWhlBone Plate BrakeStand HornLeverType HornLeverOffset
@persist BailPiston BailRing FRHandle FSHandle CutHinge CutinUnlock
@persist AirFlow CalCurve:table AltAFM AFMInd CFMA AmtrakF40PHStand CFM MaxLoad 
@persist [EngineRunLabel_On EngineRunLabel_Off GenFieldLabel_On GenFieldLabel_Off ControlLabel_On ControlLabel_Off GroundLightsLabel_On GroundLightsLabel_Off]:string
@persist [StepLightsLabel_On StepLightsLabel_Off GaugeLightsLabel_On GaugeLightsLabel_Off]:string
@persist [AuxSwitch1Label_On AuxSwitch1Label_Off AuxSwitch2Label_On AuxSwitch2Label_Off AuxSwitch3Label_On AuxSwitch3Label_Off]:string
@persist AirBrakSoundePreset
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
@trigger MU_Master
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#PowerTrain's AAR Super Bone Stand v0.1: Born out of Necessity!
#PowerTrain's AAR Super Bone Stand v0.2: The Beginning of the Customs...
#PowerTrain's AAR Super Bone Stand v0.3: The Main Control Bits
#PowerTrain's AAR Super Bone Stand v0.4: The Wonker Hjonker Plonkers
#PowerTrain's AAR Super Bone Stand v0.5: The Air Brake Library
#PowerTrain's AAR Super Bone Stand v0.55: More Air Brake Fuckery!
#PowerTrain's AAR Super Bone Stand v0.56: Calling the Exterminator: Minor Bug Fixes and Tweaks

if(duped()){
    reset()
}
if(first()){
    #FOR USE WITH RLC PT 2.0.66 OR OTHER COMPATIBLE VERSIONS
    CtlTable["CS_Version",string] = "2.0.66"
    
    #General Setup Instructions:
    #You will need one of these with RLC PT2. Spawn it somewhere and get wiring! See the RLC PT2 Operator's Manual for more instructions.
    #Don't neglect to check the config!
    #The "HEP_Notch" input is only necessary if the locomotive has HEP.
    #The "Active" and "RemoteControl" inputs are only necessary if the locomotive is equipped with Remote Control capability; "Active" goes to the Pod Controller, "RemoteControl" to a separate toggled button.
    #The "UsingRearSeat" input  is only necessary if the locomotive features Dual Cabs or Dual Control Stands.
    
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#Config
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    #Pick a Control Scheme File! You can find them in "ptgamma/controls/" !
    #include "ptgamma/controls/MSTS"

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Power Controller Config
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    Plate = 3 # 0 uses the default stand model alone. 1 removes the default and uses the standard AAR plate model in its place. 2 uses the composite plate 
              # with a selector lever. 3 uses a GE KC108 plate module. Note: option 3 does not support the dynamic blankout bodygroup that the others do.

    NotchedThrottle = 1 #0 for Continuous Throttle, 1 for Notched Throttle.
    NumThrottleNotches = 8 #Number of Throttle Notches, not counting idle (If Used).

    HasDynamics = 1 #1 for Has Dynamic Brakes, 0 for Doesn't Have Dynamic Brakes

    NotchedDynamics = 0 #0 for Continuous Dynamic Brakes, 1 for Notched Dynamic Brakes

    TransitionMode = 1 #0 for No Transition, 1 for Transition
    TransitionControlType = 2 #0 for MANUAL Transition, 1 for Automatic Transition With Selector, 2 for Fully Automatic Transition

    RadioType = 2 # 0 for blank, 1 for modern Motorola Spectra, 2 for old school phone handset.

    FancyReverserSounds = 0 # Enabled the sounds in the fancy reverser sounds config below.
    
    RadioHeightOffset = 0 # Do I have to explain everything to you??
    

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Lever Sounds Config
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    
    Lever_Throttle  = "rlc_delta/cstands/throttle/U8.wav"
    
    # Extra Fancy Reverser Sounds
    Lever_ReverserNF = "rlc_delta/cstands/reverser/rev_cntr_fwd.wav"  #Neutral to Forward
    Lever_ReverserFN = "rlc_delta/cstands/reverser/rev_fwd_cntr.wav"  #Forward to Neutral

    Lever_ReverserNR = "rlc_delta/cstands/reverser/rev_cntr_rev.wav"  #Neutral to Reverse
    Lever_ReverserRN = "rlc_delta/cstands/reverser/rev_rev_cntr.wav"  #Reverse to Neutral

    # Normal Reverser Sounds
    Lever_ReverserF = "gsgtrainsounds/misc/cab/reverser_fr_b23-7.wav"      
    Lever_ReverserN = "gsgtrainsounds/misc/cab/reverser_n_b23-7.wav"
    Lever_ReverserB = "gsgtrainsounds/misc/cab/reverser_fr_b23-7.wav"

    # Reverser Contactor Motor Sounds
    Motor_F  = "rlc_delta/cstands/reverser/motor_fwd.wav"
    Motor_R  = "rlc_delta/cstands/reverser/motor_rev.wav"
    Motor_DB = "rlc_delta/cstands/reverser/motor_db.wav"
    # ^ These don't work yet, I'm working on it...

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#Gauges Config
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    Gauge1Skin = "models/rlc_delta_lua/accessories/gauge_air_gw_795-160g"
    Gauge2Skin = "models/rlc_delta_lua/accessories/gauge_air_gw_795-160g"
    AFMGaugeSkinA = "models/rlc_delta_lua/accessories/gauge_air_gw_796-653g_a"
    AFMGaugeSkinB = "models/rlc_delta_lua/accessories/gauge_air_gw_796-653g_b"
    AmmeterSkin = "models/gsgtrainprops/cab/gauge_amp_emd_a1500_d800_v1"
    SpeedometerSkin = "models/gsgtrainprops/cab/speedo_black"

    GaugeOffset = 0.75 # How far offset from the stand the gauges will be. Usefule if you're using the "flat" bodygroup for the plate surrounding the gauges.
    GaugeOffsetLoad = 0 # Same as above, but for the loadmeter,since that's offset less by default.
 
    AFMInd = 1  # Adds a CFM Gauge.
    AltAFM = 1  #Changes CFM Gauge style.

    MaxLoad = 1800 # Maximum Traction Motor Load - This is for ammeter needle angle calculations.

    AmtrakF40PHStand = 0  # Adds the extension for the Amtrak F40PH style control stands

    MaxSpeedoReading = 120 # The highest number on the speedometer. This is for speedometer needle angle calculations.
                       
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Air Brake Config 
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    BrakeStand = 0 # 0 is the default 26 brakes. 1 is the NYAB CCB, 2 is the WABTEC FastBrake stand, 3 is 34RL and 4 is 6SL.  
                # Why the fuck would you pick 3 or 4? For the memes, duh!

    BrakeHeightOffset = 3  #Height offset for the Brake stand.
    RaisedIndLever = 0 #The lever is raised when the brake is lowered to make room for a radio (I think)
    HornLeverType = 1 # 0 = J-Hook Horn Valve, 1 = Modern Pinned Solenoid, 2 = Omni-Directional Solenoid, 3 = Sprung Stick Solenoid, 4 Button

    HornLeverOffset = 2 #Height offset for the horn actuator.

    LocoBrakeMode = 0 #0 for Self Lapping, 1 for Manual Lapping

    InitialReduction = 6 #If using 24RL or 26L brake modes, the train brake will automatically drop this much pressure in First Service or Initial Reduction positions.
    FeedPressure = 90 #Feed Valve pressure in PSI. 70 was the standard until the 1950s, 90 is the standard for freight. 110 is the passenger standard, 120 is sometimes used by mountain railroads.

    AirBrakeMode = 2
    #0 - Simple Self-Lapping (Easy)
    #1 - Simple Manual Lapping (Medium)
    #2 - 26L Self-Lapping (Medium-Hard)
    #3 - 24RL Manual Lapping (Hard)
    #4 - No. 6 (6SL/6BL/6DS/6ET) Manual Lapping (Hard)

    #24RL, No. 6, and 26L are the hardest, but also the most rewarding!

    WarningHiss = "gsgtrainsounds/misc/desktop/horn_air_loop.wav"

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    AirBrakSoundePreset = 4 # 0 for silent (or a custom soundset if you choose to make one)
                        # 1 for EPIC II (Used in many passenger units including cabcars)
                        # 2 for CCBII (EMD SD70MAC)
                        # 3 for CCBII (SIEMENS ALC42)
                        # 4 for Generic 26L
                        # 5 for 26L (EMD SW1500)
                        # 6 for 26L (ALCo RS11)
                        # 7 for 26L (EMD SD40-2)
                        # 8 for 26L (GE U18B)
                        # 9 for 26L (ALCo KC99)
                        # 10 for 26L (GE KC108)
                        # 11 for 26L (ALCo Composite)
                        # 12 for 24RL (EMD GP7)
                        # 13 for 24RL (EMD F7)
                        # 14 for 14EL (GE C173L)
                        # 15 for Generic 6SL / 6BL
                        # 16 for 6SL (ALCo T6)

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Air Brake Sound Library 
#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#[

if(AirBrakSoundePreset==0){
    
    #Automatic / Train Brake Lever - Blank / Custom Template
    Lever_ABEmergency = ""
    Lever_ABEmergencyRecover = ""
    Lever_ABSuppressionOn = ""
    Lever_ABSuppressionOff = ""
    Lever_ABMove = ""
    Lever_ABNotch = ""
    Lever_ABRelease = ""
    
    #Automatic / Train Brake Air - Blank / Custom Template
    AirBrakeApply = ""
    AirBrakeApplyInitial = ""
    AirBrakeRelease = ""
    AirBrakeApplyLoop = ""
    AirBrakeApplyEnd = ""
    
    #Independent / Locomotive Brake - Blank / Custom Template
    LocoBrakeFull = ""
    LocoBrakeReleaseSoft = ""
    LocoBrakeReleaseHard = ""
    LocoBrakeBailoff = ""
    LocoBrakeBailoffEnd = ""

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

}elseif(AirBrakSoundePreset == 1){
    
    #Automatic / Train Brake Lever - Epic II
    Lever_ABEmergency = "lazpack/misc/airbrakes/epic_ii/application_emergency.wav"
    Lever_ABEmergencyRecover = "lazpack/misc/airbrakes/epic_ii/release_emergency.wav"
    Lever_ABSuppressionOn = "trans_train_sounds/controls/aar/auto_lever_suppression_on.wav"
    Lever_ABSuppressionOff = "trans_train_sounds/controls/aar/auto_lever_suppression_off.wav"
    Lever_ABMove = "trans_train_sounds/controls/aar/auto_lever_move.wav"
    Lever_ABNotch = "trans_train_sounds/controls/aar/auto_lever_release.wav"
    Lever_ABRelease = "trans_train_sounds/controls/aar/auto_lever_release.wav"
    
    #Automatic / Train Brake Air - Epic II
    AirBrakeApply = "trans_train_sounds/controls/aar/auto_air_apply.wav"
    AirBrakeApplyInitial = "trans_train_sounds/controls/aar/auto_air_apply_initial.wav"
    AirBrakeRelease = "lazpack/misc/airbrakes/epic_ii/release.wav"
    AirBrakeApplyLoop = "lazpack/misc/airbrakes/epic_ii/application_loop.wav"
    AirBrakeApplyEnd = "lazpack/misc/airbrakes/epic_ii/application_end.wav"
    
    #Independent / Locomotive Brake - Epic II
    LocoBrakeFull = "lazpack/misc/airbrakes/epic_ii/release.wav"
    LocoBrakeReleaseSoft = "lazpack/misc/airbrakes/epic_ii/release.wav"
    LocoBrakeReleaseHard = "lazpack/misc/airbrakes/epic_ii/release.wav"
    LocoBrakeBailoff = "lazpack/misc/airbrakes/epic_ii/independent_bailoff_on.wav"
    LocoBrakeBailoffEnd = "lazpack/misc/airbrakes/epic_ii/independent_bailoff_off.wav"

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

}elseif(AirBrakSoundePreset == 2){

    #Automatic / Train Brake Lever - CCBII SD70MAC
    Lever_ABEmergency = "gsgtrainsounds/misc/airbrakes/ccb2_sd70mac/apply_emergency.wav"
    Lever_ABEmergencyRecover = "gsgtrainsounds/misc/airbrakes/ccb2_sd70mac/emergency_release.wav"
    Lever_ABSuppressionOn = "trans_train_sounds/controls/aar/auto_lever_suppression_on.wav"
    Lever_ABSuppressionOff = "trans_train_sounds/controls/aar/auto_lever_suppression_off.wav"
    Lever_ABMove = "trans_train_sounds/controls/aar/auto_lever_move.wav"
    Lever_ABNotch = "trans_train_sounds/controls/aar/auto_lever_release.wav"
    Lever_ABRelease = "trans_train_sounds/controls/aar/auto_lever_release.wav"
    
    #Automatic / Train Brake Air - CCBII SD70MAC
    AirBrakeApply = "trans_train_sounds/controls/aar/auto_air_apply.wav"
    AirBrakeApplyInitial = "trans_train_sounds/controls/aar/auto_air_apply_initial_alt.wav"
    AirBrakeRelease = "gsgtrainsounds/misc/airbrakes/ccb2_sd70mac/release.wav"
    AirBrakeApplyLoop = "gsgtrainsounds/misc/airbrakes/ccb2_sd70mac/application_loop.wav"
    AirBrakeApplyEnd = "gsgtrainsounds/misc/airbrakes/ccb2_sd70mac/application_end.wav"
    
    #Independent / Locomotive Brake - CCBII SD70MAC
    LocoBrakeFull = "gsgtrainsounds/misc/airbrakes/ccb2_sd70mac/independent_apply.wav"
    LocoBrakeReleaseSoft = "gsgtrainsounds/misc/airbrakes/ccb2_sd70mac/independent_release.wav"
    LocoBrakeReleaseHard = "gsgtrainsounds/misc/airbrakes/ccb2_sd70mac/independent_release.wav"
    LocoBrakeBailoff = "gsgtrainsounds/misc/airbrakes/ccb2_sd70mac/independent_bailoff_on.wav"
    LocoBrakeBailoffEnd = "gsgtrainsounds/misc/airbrakes/ccb2_sd70mac/independent_bailoff_off.wav"

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

}elseif(AirBrakSoundePreset == 3){

    #Automatic / Train Brake Lever - CCBII ALC42
    Lever_ABEmergency = "kei/trains/cab/ccb2_alc42/auto_apply_emergency.wav"
    Lever_ABEmergencyRecover = "kei/trains/cab/ccb2_alc42/auto_release.wav"
    Lever_ABSuppressionOn = "trans_train_sounds/controls/aar/auto_lever_suppression_on.wav"
    Lever_ABSuppressionOff = "trans_train_sounds/controls/aar/auto_lever_suppression_off.wav"
    Lever_ABMove = "trans_train_sounds/controls/aar/auto_lever_move.wav"
    Lever_ABNotch = "trans_train_sounds/controls/aar/auto_lever_release.wav"
    Lever_ABRelease = "trans_train_sounds/controls/aar/auto_lever_release.wav"
    
    #Automatic / Train Brake Air - CCBII ALC42
    AirBrakeApply = "trans_train_sounds/controls/aar/auto_air_apply.wav"
    AirBrakeApplyInitial = "trans_train_sounds/controls/aar/auto_air_apply_initial_alt.wav"
    AirBrakeRelease = "kei/trains/cab/ccb2_alc42/auto_release.wav"
    AirBrakeApplyLoop = "kei/trains/cab/ccb2_alc42/auto_apply_loop.wav"
    AirBrakeApplyEnd = "kei/trains/cab/ccb2_alc42/auto_apply_end.wav"
    
    #Independent / Locomotive Brake - CCBII ALC42
    LocoBrakeFull = "kei/trains/cab/ccb2_alc42/ind_apply.wav"
    LocoBrakeReleaseSoft = "kei/trains/cab/ccb2_alc42/ind_release.wav"
    LocoBrakeReleaseHard = "kei/trains/cab/ccb2_alc42/ind_release.wav"
    LocoBrakeBailoff = "kei/trains/cab/ccb2_alc42/ind_bailoff_on.wav"
    LocoBrakeBailoffEnd = "kei/trains/cab/ccb2_alc42/ind_bailoff_off.wav"

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

}elseif(AirBrakSoundePreset == 4){

    #Automatic / Train Brake Lever - Generic 26L
    Lever_ABEmergency = "rlc_delta/cstands/26l_air/26l_emerg.wav"
    Lever_ABEmergencyRecover = "kei/trains/cab/ccb2_alc42/auto_release.wav"
    Lever_ABSuppressionOn = "trans_train_sounds/controls/aar/auto_lever_suppression_on.wav"
    Lever_ABSuppressionOff = "trans_train_sounds/controls/aar/auto_lever_suppression_off.wav"
    Lever_ABMove = "rlc_delta/cstands/26l_air/26l_trainbrakeend.wav"
    Lever_ABNotch = "rlc_delta/cstands/26l_air/tb_lever.wav"
    Lever_ABRelease = "rlc_delta/cstands/26l_air/26l_trainbrakeend.wav"
    
    #Automatic / Train Brake Air - Generic 26L
    AirBrakeApply = "trans_train_sounds/controls/aar/auto_air_apply.wav"
    AirBrakeApplyInitial = "rlc_delta/cstands/26l_air/26l_actuate.wav"
    AirBrakeRelease = "rlc_delta/cstands/26l_air/ab_release.wavv"
    AirBrakeApplyLoop = "rlc_delta/cstands/26l_air/26l_apply_loop.wav"
    AirBrakeApplyEnd = "rlc_delta/cstands/26l_air/26l_apply.wav"
    
    #Independent / Locomotive Brake - Generic 26L
    LocoBrakeFull = "rlc_delta/cstands/26l_air/independent_apply.wav"
    LocoBrakeReleaseSoft = "rlc_delta/cstands/26l_air/tb_release_soft.wav"
    LocoBrakeReleaseHard = "rlc_delta/cstands/26l_air/tb_release_hard.wavv"
    LocoBrakeBailoff = "rlc_delta/cstands/26l_air/exterior/26l_indep_bail.wav"
    LocoBrakeBailoffEnd = ""

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

}elseif(AirBrakSoundePreset == 5){

    #Automatic / Train Brake Lever - 26L SW1500
    Lever_ABEmergency = "kei/trains/cab/26l_sw1500/auto_emergency_apply.wav"
    Lever_ABEmergencyRecover = "kei/trains/cab/26l_sw1500/auto_emergency_release.wav"
    Lever_ABSuppressionOn = "trans_train_sounds/controls/aar/auto_lever_suppression_on.wav"
    Lever_ABSuppressionOff = "trans_train_sounds/controls/aar/auto_lever_suppression_off.wav"
    Lever_ABMove = "trans_train_sounds/controls/aar/auto_lever_move.wav"
    Lever_ABNotch = "trans_train_sounds/controls/aar/auto_lever_release.wav"
    Lever_ABRelease = "trans_train_sounds/controls/aar/auto_lever_release.wav"
    
    #Automatic / Train Brake Air - 26L SW1500
    AirBrakeApply = "trans_train_sounds/controls/aar/auto_air_apply.wav"
    AirBrakeApplyInitial = "trans_train_sounds/controls/aar/auto_air_apply_initial_alt.wav"
    AirBrakeRelease = "kei/trains/cab/26l_sw1500/auto_release.wav"
    AirBrakeApplyLoop = "kei/trains/cab/26l_sw1500/auto_apply_loop.wav"
    AirBrakeApplyEnd = "kei/trains/cab/26l_sw1500/auto_apply_end.wav"
    
    #Independent / Locomotive Brake - 26L SW1500
    LocoBrakeFull = "kei/trains/cab/26l_sw1500/ind_apply.wav"
    LocoBrakeReleaseSoft = "kei/trains/cab/26l_sw1500/ind_release.wav"
    LocoBrakeReleaseHard = "kei/trains/cab/26l_sw1500/ind_release.wav"
    LocoBrakeBailoff = "kei/trains/cab/26l_sw1500/ind_bailoff_on.wav"
    LocoBrakeBailoffEnd = "kei/trains/cab/26l_sw1500/ind_bailoff_off.wav"

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

}elseif(AirBrakSoundePreset == 6){

    #Automatic / Train Brake Lever - 26L RS11
    Lever_ABEmergency = "kei/trains/cab/26l_rs11/auto_apply_emergency.wav"
    Lever_ABEmergencyRecover = "kei/trains/cab/26l_rs11/auto_release_emergency.wav"
    Lever_ABSuppressionOn = "trans_train_sounds/controls/aar/auto_lever_suppression_on.wav"
    Lever_ABSuppressionOff = "trans_train_sounds/controls/aar/auto_lever_suppression_off.wav"
    Lever_ABMove = "trans_train_sounds/controls/aar/auto_lever_move.wav"
    Lever_ABNotch = "trans_train_sounds/controls/aar/auto_lever_release.wav"
    Lever_ABRelease = "trans_train_sounds/controls/aar/auto_lever_release.wav"
    
    #Automatic / Train Brake Air - 26L RS11
    AirBrakeApply = "trans_train_sounds/controls/aar/auto_air_apply.wav"
    AirBrakeApplyInitial = "trans_train_sounds/controls/aar/auto_air_apply_initial_alt.wav"
    AirBrakeRelease = "kei/trains/cab/26l_rs11/auto_release.wav"
    AirBrakeApplyLoop = "kei/trains/cab/26l_rs11/auto_apply_loop.wav"
    AirBrakeApplyEnd = "kei/trains/cab/26l_rs11/auto_apply_end.wav"
    
    #Independent / Locomotive Brake - 26L RS11
    LocoBrakeFull = "kei/trains/cab/26l_rs11/ind_apply.wav"
    LocoBrakeReleaseSoft = "kei/trains/cab/26l_rs11/ind_release.wav"
    LocoBrakeReleaseHard = "kei/trains/cab/26l_rs11/ind_release.wav"
    LocoBrakeBailoff = "kei/trains/cab/26l_rs11/ind_bailoff_on.wav"
    LocoBrakeBailoffEnd = "kei/trains/cab/26l_rs11/ind_bailoff_off.wav"

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

}elseif(AirBrakSoundePreset == 7){

    #Automatic / Train Brake Lever - 26L SD40-2
    Lever_ABEmergency = "kei/trains/cab/26l_sd40-2/auto_apply_emergency.wav"
    Lever_ABEmergencyRecover = "kei/trains/cab/26l_sd40-2/auto_release_emergency.wav"
    Lever_ABSuppressionOn = "trans_train_sounds/controls/aar/auto_lever_suppression_on.wav"
    Lever_ABSuppressionOff = "trans_train_sounds/controls/aar/auto_lever_suppression_off.wav"
    Lever_ABMove = "trans_train_sounds/controls/aar/auto_lever_move.wav"
    Lever_ABNotch = "trans_train_sounds/controls/aar/auto_lever_release.wav"
    Lever_ABRelease = "trans_train_sounds/controls/aar/auto_lever_release.wav"
    
    #Automatic / Train Brake Air - 26L SD40-2
    AirBrakeApply = "trans_train_sounds/controls/aar/auto_air_apply.wav"
    AirBrakeApplyInitial = "trans_train_sounds/controls/aar/auto_air_apply_initial_alt.wav"
    AirBrakeRelease = "kei/trains/cab/26l_sd40-2/auto_release.wav"
    AirBrakeApplyLoop = "kei/trains/cab/26l_sd40-2/auto_apply_loop.wav"
    AirBrakeApplyEnd = "kei/trains/cab/26l_sd40-2/auto_apply_end.wav"
    
    #Independent / Locomotive Brake - 26L SD40-2
    LocoBrakeFull = "kei/trains/cab/26l_sd40-2/ind_apply.wav"
    LocoBrakeReleaseSoft = "kei/trains/cab/26l_sd40-2/ind_release.wav"
    LocoBrakeReleaseHard = "kei/trains/cab/26l_sd40-2/ind_release.wav"
    LocoBrakeBailoff = "kei/trains/cab/26l_sd40-2/ind_bailoff_on.wav"
    LocoBrakeBailoffEnd = "kei/trains/cab/26l_sd40-2/ind_bailoff_off.wav"

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

}elseif(AirBrakSoundePreset == 8){

    #Automatic / Train Brake Lever - 26L U18B
    Lever_ABEmergency = "kei/trains/cab/26l_u18b/auto_emergency_apply.wav"
    Lever_ABEmergencyRecover = "kei/trains/cab/26l_u18b/auto_emergency_release.wav"
    Lever_ABSuppressionOn = "trans_train_sounds/controls/aar/auto_lever_suppression_on.wav"
    Lever_ABSuppressionOff = "trans_train_sounds/controls/aar/auto_lever_suppression_off.wav"
    Lever_ABMove = "trans_train_sounds/controls/aar/auto_lever_move.wav"
    Lever_ABNotch = "trans_train_sounds/controls/aar/auto_lever_release.wav"
    Lever_ABRelease = "trans_train_sounds/controls/aar/auto_lever_release.wav"
    
    #Automatic / Train Brake Air - 26L U18B
    AirBrakeApply = "trans_train_sounds/controls/aar/auto_air_apply.wav"
    AirBrakeApplyInitial = "trans_train_sounds/controls/aar/auto_air_apply_initial_alt.wav"
    AirBrakeRelease = "kei/trains/cab/26l_u18b/auto_release.wav"
    AirBrakeApplyLoop = "kei/trains/cab/26l_u18b/auto_apply_loop.wav"
    AirBrakeApplyEnd = "kei/trains/cab/26l_u18b/auto_apply_end.wav"
    
    #Independent / Locomotive Brake - 26L U18B
    LocoBrakeFull = "kei/trains/cab/26l_u18b/ind_apply.wav"
    LocoBrakeReleaseSoft = "kei/trains/cab/26l_u18b/ind_release.wav"
    LocoBrakeReleaseHard = "kei/trains/cab/26l_u18b/ind_release.wav"
    LocoBrakeBailoff = "kei/trains/cab/26l_u18b/ind_bailoff_on.wav"
    LocoBrakeBailoffEnd = "kei/trains/cab/26l_u18b/ind_bailoff_off.wav"

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

}elseif(AirBrakSoundePreset == 9){

    #Automatic / Train Brake Lever - 26L KC99
    Lever_ABEmergency = "lazpack/misc/airbrakes/26l_kc99/auto_apply_emergency.wav"
    Lever_ABEmergencyRecover = "lazpack/misc/airbrakes/26l_kc99/auto_release_emergency.wav"
    Lever_ABSuppressionOn = "trans_train_sounds/controls/aar/auto_lever_suppression_on.wav"
    Lever_ABSuppressionOff = "trans_train_sounds/controls/aar/auto_lever_suppression_off.wav"
    Lever_ABMove = "trans_train_sounds/controls/aar/auto_lever_move.wav"
    Lever_ABNotch = "trans_train_sounds/controls/aar/auto_lever_release.wav"
    Lever_ABRelease = "trans_train_sounds/controls/aar/auto_lever_release.wav"
    
    #Automatic / Train Brake Air - 26L KC99
    AirBrakeApply = "trans_train_sounds/controls/aar/auto_air_apply.wav"
    AirBrakeApplyInitial = "trans_train_sounds/controls/aar/auto_air_apply_initial.wav"
    AirBrakeRelease = "lazpack/misc/airbrakes/26l_kc99/auto_release.wav"
    AirBrakeApplyLoop = "lazpack/misc/airbrakes/26l_kc99/auto_apply_loop.wav"
    AirBrakeApplyEnd = "lazpack/misc/airbrakes/26l_kc99/auto_apply_end.wav"
    
    #Independent / Locomotive Brake - 26L KC99
    LocoBrakeFull = "lazpack/misc/airbrakes/26l_kc99/independent_apply.wav"
    LocoBrakeReleaseSoft = "lazpack/misc/airbrakes/26l_kc99/independent_release.wav"
    LocoBrakeReleaseHard = "lazpack/misc/airbrakes/26l_kc99/independent_release.wav"
    LocoBrakeBailoff = "lazpack/misc/airbrakes/26l_kc99/independent_bailoff_on.wav"
    LocoBrakeBailoffEnd = "lazpack/misc/airbrakes/26l_kc99/independent_bailoff_off.wav"

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

}elseif(AirBrakSoundePreset == 10){

    #Automatic / Train Brake Lever - 26L KC108
    Lever_ABEmergency = "lazpack/misc/airbrakes/26l_kc108/auto_apply_emergency.wav"
    Lever_ABEmergencyRecover = "lazpack/misc/airbrakes/26l_kc108/auto_release_emergency.wav"
    Lever_ABSuppressionOn = "trans_train_sounds/controls/aar/auto_lever_suppression_on.wav"
    Lever_ABSuppressionOff = "trans_train_sounds/controls/aar/auto_lever_suppression_off.wav"
    Lever_ABMove = "trans_train_sounds/controls/aar/auto_lever_move.wav"
    Lever_ABNotch = "trans_train_sounds/controls/aar/auto_lever_release.wav"
    Lever_ABRelease = "trans_train_sounds/controls/aar/auto_lever_release.wav"
    
    #Automatic / Train Brake Air - 26L KC108
    AirBrakeApply = "trans_train_sounds/controls/aar/auto_air_apply.wav"
    AirBrakeApplyInitial = "trans_train_sounds/controls/aar/auto_air_apply_initial.wav"
    AirBrakeRelease = "lazpack/misc/airbrakes/26l_kc108/auto_release.wav"
    AirBrakeApplyLoop = "lazpack/misc/airbrakes/26l_kc108/auto_apply_loop.wav"
    AirBrakeApplyEnd = "lazpack/misc/airbrakes/26l_kc108/auto_apply_end.wav"
    
    #Independent / Locomotive Brake - 26L KC108
    LocoBrakeFull = "lazpack/misc/airbrakes/26l_kc108/independent_apply.wav"
    LocoBrakeReleaseSoft = "lazpack/misc/airbrakes/26l_kc108/independent_release.wav"
    LocoBrakeReleaseHard = "lazpack/misc/airbrakes/26l_kc108/independent_release.wav"
    LocoBrakeBailoff = "lazpack/misc/airbrakes/26l_kc108/independent_bailoff_on.wav"
    LocoBrakeBailoffEnd = "lazpack/misc/airbrakes/26l_kc108/independent_bailoff_off.wav"

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

}elseif(AirBrakSoundePreset == 11){

    #Automatic / Train Brake Lever - 26L ALCO Composite
    Lever_ABEmergency = "lazpack/misc/airbrakes/26l_alco_composite/automatic_emergency.wav"
    Lever_ABEmergencyRecover = "lazpack/misc/airbrakes/26l_alco_composite/automatic_emergency_release.wav"
    Lever_ABSuppressionOn = "trans_train_sounds/controls/aar/auto_lever_suppression_on.wav"
    Lever_ABSuppressionOff = "trans_train_sounds/controls/aar/auto_lever_suppression_off.wav"
    Lever_ABMove = "trans_train_sounds/controls/aar/auto_lever_move.wav"
    Lever_ABNotch = "trans_train_sounds/controls/aar/auto_lever_release.wav"
    Lever_ABRelease = "trans_train_sounds/controls/aar/auto_lever_release.wav"
    
    #Automatic / Train Brake Air - 26L ALCO Composite
    AirBrakeApply = "trans_train_sounds/controls/aar/auto_air_apply.wav"
    AirBrakeApplyInitial = "trans_train_sounds/controls/aar/auto_air_apply_initial.wav"
    AirBrakeRelease = "lazpack/misc/airbrakes/26l_alco_composite/automatic_release.wav"
    AirBrakeApplyLoop = "lazpack/misc/airbrakes/26l_alco_composite/automatic_apply_loop.wav"
    AirBrakeApplyEnd = "lazpack/misc/airbrakes/26l_alco_composite/automatic_apply_end.wav"
    
    #Independent / Locomotive Brake - 26L ALCO Composite
    LocoBrakeFull = "lazpack/misc/airbrakes/26l_alco_composite/independent_apply.wav"
    LocoBrakeReleaseSoft = "lazpack/misc/airbrakes/26l_alco_composite/independent_release.wav"
    LocoBrakeReleaseHard = "lazpack/misc/airbrakes/26l_alco_composite/independent_release.wav"
    LocoBrakeBailoff = "lazpack/misc/airbrakes/26l_alco_composite/independent_bailoff_on.wav"
    LocoBrakeBailoffEnd = "lazpack/misc/airbrakes/26l_alco_composite/independent_bailoff_off.wav"

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

}elseif(AirBrakSoundePreset == 12){

    #Automatic / Train Brake Lever - 24RL GP7
    Lever_ABEmergency = "kei/trains/cab/24rl_gp7/auto_apply_emergency.wav"
    Lever_ABEmergencyRecover = "kei/trains/cab/24rl_gp7/auto_release_emergency.wav"
    Lever_ABSuppressionOn = "trans_train_sounds/controls/aar/auto_lever_suppression_off.wav"
    Lever_ABSuppressionOff = "trans_train_sounds/controls/aar/auto_lever_suppression_off.wav"
    Lever_ABMove = "trans_train_sounds/controls/aar/auto_lever_move.wav"
    Lever_ABNotch = "gsgtrainsounds/misc/airbrakes/air_16m_move.wav"
    Lever_ABRelease = "trans_train_sounds/controls/aar/auto_lever_move.wav"
    
    #Automatic / Train Brake Air - 24RL GP7
    AirBrakeApply = "trans_train_sounds/controls/kc92/6sl_service.wav"
    AirBrakeApplyInitial = "trans_train_sounds/controls/kc92/6sl_service.wav"
    AirBrakeRelease = "kei/trains/cab/24rl_gp7/auto_release.wav"
    AirBrakeApplyLoop = "kei/trains/cab/24rl_gp7/auto_apply_loop.wav"
    AirBrakeApplyEnd = "kei/trains/cab/24rl_gp7/auto_apply_end.wav"
    
    #Independent / Locomotive Brake - 24RL GP7
    LocoBrakeFull = "kei/trains/cab/24rl_gp7/ind_apply.wav"
    LocoBrakeReleaseSoft = "kei/trains/cab/24rl_gp7/ind_release.wav"
    LocoBrakeReleaseHard = "kei/trains/cab/24rl_gp7/ind_release.wav"
    LocoBrakeBailoff = "kei/trains/cab/24rl_gp7/ind_bailoff_on.wav"
    LocoBrakeBailoffEnd = "kei/trains/cab/24rl_gp7/ind_bailoff_off.wav"

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

}elseif(AirBrakSoundePreset == 13){

    #Automatic / Train Brake Lever - 24RL F7
    Lever_ABEmergency = "gsgtrainsounds/misc/airbrakes/24rl_f7/apply_emergency.wav"
    Lever_ABEmergencyRecover = "gsgtrainsounds/misc/airbrakes/24rl_f7/emergency_release.wav"
    Lever_ABSuppressionOn = "trans_train_sounds/controls/aar/auto_lever_suppression_on.wav"
    Lever_ABSuppressionOff = "trans_train_sounds/controls/aar/auto_lever_suppression_off.wav"
    Lever_ABMove = "trans_train_sounds/controls/aar/auto_lever_move.wav"
    Lever_ABNotch = "trans_train_sounds/controls/aar/auto_lever_release.wav"
    Lever_ABRelease = "trans_train_sounds/controls/aar/auto_lever_release.wav"
    
    #Automatic / Train Brake Air - 24RL F7
    AirBrakeApply = "trans_train_sounds/controls/aar/auto_air_apply.wav"
    AirBrakeApplyInitial = "gsgtrainsounds/misc/airbrakes/24rl_f7/application_firstservice.wav"
    AirBrakeRelease = "gsgtrainsounds/misc/airbrakes/24rl_f7/release.wav"
    AirBrakeApplyLoop = "gsgtrainsounds/misc/airbrakes/24rl_f7/application_loop.wav"
    AirBrakeApplyEnd = "gsgtrainsounds/misc/airbrakes/24rl_f7/application_end.wav"
    
    #Independent / Locomotive Brake - 24RL F7
    LocoBrakeFull = "gsgtrainsounds/misc/airbrakes/24rl_f7/independent_apply.wav"
    LocoBrakeReleaseSoft = "gsgtrainsounds/misc/airbrakes/24rl_f7/independent_release.wav"
    LocoBrakeReleaseHard = "gsgtrainsounds/misc/airbrakes/24rl_f7/independent_release.wav"
    LocoBrakeBailoff = "gsgtrainsounds/misc/airbrakes/24rl_f7/independent_bailoff_on.wav"
    LocoBrakeBailoffEnd = "gsgtrainsounds/misc/airbrakes/24rl_f7/independent_bailoff_off.wav"

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

}elseif(AirBrakSoundePreset == 14){

    #Automatic / Train Brake Lever - 14EL GE C173L
    Lever_ABEmergency = "lazpack/misc/airbrakes/14el_ge_c-173l/apply_emergency.wav"
    Lever_ABEmergencyRecover = "lazpack/misc/airbrakes/14el_ge_c-173l/release_emergency.wav"
    Lever_ABSuppressionOn = "trans_train_sounds/controls/aar/auto_lever_suppression_on.wav"
    Lever_ABSuppressionOff = "trans_train_sounds/controls/aar/auto_lever_suppression_off.wav"
    Lever_ABMove = "trans_train_sounds/controls/aar/auto_lever_move.wav"
    Lever_ABNotch = "trans_train_sounds/controls/aar/auto_lever_release.wav"
    Lever_ABRelease = "trans_train_sounds/controls/aar/auto_lever_release.wav"
    
    #Automatic / Train Brake Air - 14EL GE C173L
    AirBrakeApply = "trans_train_sounds/controls/aar/auto_air_apply.wav"
    AirBrakeApplyInitial = "trans_train_sounds/controls/aar/auto_air_apply_initial.wav"
    AirBrakeRelease = "lazpack/misc/airbrakes/14el_ge_c-173l/release.wav"
    AirBrakeApplyLoop = "lazpack/misc/airbrakes/14el_ge_c-173l/apply_service_loop.wav"
    AirBrakeApplyEnd = "lazpack/misc/airbrakes/14el_ge_c-173l/apply_service_end.wav"
    
    #Independent / Locomotive Brake - 14EL GE C173L
    LocoBrakeFull = "lazpack/misc/airbrakes/14el_ge_c-173l/independent_apply.wav"
    LocoBrakeReleaseSoft = "lazpack/misc/airbrakes/14el_ge_c-173l/independent_release.wav"
    LocoBrakeReleaseHard = "lazpack/misc/airbrakes/14el_ge_c-173l/independent_release.wav"
    LocoBrakeBailoff = "lazpack/misc/airbrakes/14el_ge_c-173l/independent_bailoff_on.wav"
    LocoBrakeBailoffEnd = "lazpack/misc/airbrakes/14el_ge_c-173l/independent_bailoff_off.wav"

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

}elseif(AirBrakSoundePreset == 15){

    #Automatic / Train Brake Lever - 6SL / 6BL
    Lever_ABEmergency = "prioritys_sounds/griggs/misc/brakes/6sl/emergency_apply.wavp"
    Lever_ABEmergencyRecover = "priority's sounds/griggs/misc/brakes/6sl/emergency_release.wav"
    Lever_ABSuppressionOn = "trans_train_sounds/controls/aar/auto_lever_suppression_off.wav"
    Lever_ABSuppressionOff = "trans_train_sounds/controls/aar/auto_lever_suppression_off.wav"
    Lever_ABMove = "trans_train_sounds/controls/aar/auto_lever_move.wav"
    Lever_ABNotch = "gsgtrainsounds/misc/airbrakes/air_16m_move.wav"
    Lever_ABRelease = "trans_train_sounds/controls/aar/auto_lever_move.wav"
    
    #Automatic / Train Brake Air - 6SL / 6BL
    AirBrakeApply = "trans_train_sounds/controls/kc92/6sl_service.wav"
    AirBrakeApplyInitial = "trans_train_sounds/controls/kc92/6sl_service.wav"
    AirBrakeRelease = "prioritys_sounds/griggs/misc/brakes/6sl/auto_release.wav"
    AirBrakeApplyLoop = "priority's sounds/griggs/misc/brakes/6sl/auto_apply_loop.wav"
    AirBrakeApplyEnd = "priority's sounds/griggs/misc/brakes/6sl/auto_apply_end.wav"
    
    #Independent / Locomotive Brake - 6SL / 6BL
    LocoBrakeFull = "priority's sounds/griggs/misc/brakes/6sl/independent_apply.wav"
    LocoBrakeReleaseSoft = "priority's sounds/griggs/misc/brakes/6sl/independent_release.wav"
    LocoBrakeReleaseHard = "priority's sounds/griggs/misc/brakes/6sl/independent_release.wav"
    LocoBrakeBailoff = "priority's sounds/griggs/misc/brakes/6sl/independent_bailoff_on.wav"
    LocoBrakeBailoffEnd = "priority's sounds/griggs/misc/brakes/6sl/independent_bailoff_off.wav"

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

}elseif(AirBrakSoundePreset == 16){

    #Automatic / Train Brake Lever - 6SL T6
    Lever_ABEmergency = "gsgtrainsounds/misc/airbrakes/6sc_t6/trainbrake_emergency.wav"
    Lever_ABEmergencyRecover = "gsgtrainsounds/misc/airbrakes/6sc_t6/trainbrake_emergency_release.wav"
    Lever_ABSuppressionOn = "trans_train_sounds/controls/aar/auto_lever_suppression_on.wav"
    Lever_ABSuppressionOff = "trans_train_sounds/controls/aar/auto_lever_suppression_off.wav"
    Lever_ABMove = "trans_train_sounds/controls/aar/auto_lever_move.wav"
    Lever_ABNotch = "trans_train_sounds/controls/aar/auto_lever_release.wav"
    Lever_ABRelease = "trans_train_sounds/controls/aar/auto_lever_release.wav"
    
    #Automatic / Train Brake Air - 6SL T6
    AirBrakeApply = "trans_train_sounds/controls/aar/auto_air_apply.wav"
    AirBrakeApplyInitial = "gsgtrainsounds/misc/airbrakes/6sc_t6/application_firstservice.wav"
    AirBrakeRelease = "gsgtrainsounds/misc/airbrakes/6sc_t6/trainbrake_release.wav"
    AirBrakeApplyLoop = "gsgtrainsounds/misc/airbrakes/6sc_t6/trainbrake_application_loop.wav"
    AirBrakeApplyEnd = "gsgtrainsounds/misc/airbrakes/6sc_t6/trainbrake_application_end.wav"
    
    #Independent / Locomotive Brake - 6SL T6
    LocoBrakeFull = "gsgtrainsounds/misc/airbrakes/6sc_t6/independent_apply.wav"
    LocoBrakeReleaseSoft = "gsgtrainsounds/misc/airbrakes/6sc_t6/independent_release.wav"
    LocoBrakeReleaseHard = "gsgtrainsounds/misc/airbrakes/6sc_t6/independent_release.wav"
    LocoBrakeBailoff = "gsgtrainsounds/misc/airbrakes/6sc_t6/independent_bailoff_on.wav"
    LocoBrakeBailoffEnd = "gsgtrainsounds/misc/airbrakes/6sc_t6/independent_bailoff_off.wav"

}

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Switch Labels Config
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    #Engine Run
    EngineRunLabel_On = "models/indicators/ind_enginerun_lit"
    EngineRunLabel_Off = "models/indicators/ind_enginerun_unlit"

    #Generator Field
    GenFieldLabel_On = "models/indicators/ind_gen_lit"
    GenFieldLabel_Off = "models/indicators/ind_gen_unlit"

    #Control/Fuel Pump
    ControlLabel_On = "models/indicators/ind_control_lit"
    ControlLabel_Off = "models/indicators/ind_control_unlit"

    #Ground Lights
    GroundLightsLabel_On = "models/indicators/ind_crossing_lit"
    GroundLightsLabel_Off  = "models/indicators/ind_crossing_unlit"
    
    #Step Lights
    StepLightsLabel_On = "models/indicators/ind_step_lit"
    StepLightsLabel_Off  = "models/indicators/ind_step_unlit"
    
    #Gauge Lights
    GaugeLightsLabel_On = "models/indicators/ind_step_lit"
    GaugeLightsLabel_Off  = "models/indicators/ind_step_unlit"
    
    #Aux1
    AuxSwitch1Label_On = "models/monkcabdetailpack/indwaffle/ind_lit"
    AuxSwitch1Label_Off = "models/monkcabdetailpack/indwaffle/ind_unlit"

    #Aux2
    AuxSwitch2Label_On = "models/monkcabdetailpack/indwaffle/ind_lit"
    AuxSwitch2Label_Off = "models/monkcabdetailpack/indwaffle/ind_unlit"

    #Aux3
    AuxSwitch3Label_On = "models/monkcabdetailpack/indwaffle/ind_lit"
    AuxSwitch3Label_Off = "models/monkcabdetailpack/indwaffle/ind_unlit"

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#Config End
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    CS = ControlStand:entity()
    CS:setBodygroup(2,!HasDynamics)
    if(Plate>0){
    CS:setBodygroup(1,2)
    CS:setBodygroup(7,1)
    }elseif(Plate==0){
    CS:setBodygroup(2,0)
    CS:setBodygroup(7,0)
}
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#Holos
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#Control Stand Plates
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

if(Plate == 1){
    A = 0
    holoCreate(A, 
    CS:toWorld(vec(3.75,0.25,30)),
    vec(1,1,1),
    CS:toWorld(ang(0,0,0)))
    holoColor(A, vec(255,255,255))
    holoModel(A, "models/rlc_delta_lua/cstands/aar_control_plate.mdl")
    holoParent(A, CS)
    holoBodygroup(A,1,MU_Master)
    holoBodygroup(A,2,HasDynamics)
    Panel = holoEntity(0)
}

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

if(Plate == 2){
    A = 0
    holoCreate(A, 
    CS:toWorld(vec(3.8,0.25,30.1)),
    vec(1,1,1),
    CS:toWorld(ang(0,0,0)))
    holoColor(A, vec(255,255,255))
    holoModel(A, "models/rlc_delta_lua/cstands/composite_control_plate.mdl")
    holoParent(A, CS)
    holoBodygroup(A,1,MU_Master)
    holoBodygroup(A,2,!TransitionMode)
    CS:setBodygroup(2,2)
    Panel = holoEntity(0)
}
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

if(Plate == 3){
    A = 0
    holoCreate(A, 
    CS:toWorld(vec(3.75,0.25,30)),
    vec(1,1,1),
    CS:toWorld(ang(0,0,0)))
    holoColor(A, vec(255,255,255))
    holoModel(A, "models/rlc_delta_lua/cstands/kc108_plate.mdl")
    holoParent(A, CS)
    holoBodygroup(A,1,MU_Master)
    holoBodygroup(A,2,HasDynamics)
    CS:setBodygroup(2,3)
    Panel = holoEntity(0)
}

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    Panel = holoEntity(0)
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#Brake Stands
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# 26L Automatic
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

if(BrakeStand == 0){
    A = 1
    holoCreate(A, 
    CS:toWorld(vec(6.85486,-19.1289,34.5+BrakeHeightOffset)),
    vec(1,1,1),
    CS:toWorld(ang(0,20,0)))
    holoColor(A, vec(255,255,255))
    holoModel(A, "models/rlc_delta_lua/cstands/26L_automatic.mdl")
#[    holoEntity(A):setSubMaterial(1,"models/proppertextures/aluminum_brushed_worn_stained")
    holoEntity(A):setSubMaterial(3,"models/proppertextures/brass_new")
    holoEntity(A):setSubMaterial(4,"models/proppertextures/brass_new")
    holoEntity(A):setSubMaterial(5,"models/proppertextures/acrylic2_red_hw")
    holoEntity(A):setSubMaterial(6,"models/proppertextures/acrylic2_red_hw")]#
    holoParent(A, CS)
    AutoB = holoEntity(1)

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# 26L Independent
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    A = 2
    holoCreate(A, 
    CS:toWorld(vec(7.25,-20,24+BrakeHeightOffset)),
    vec(1,1,1),
    CS:toWorld(ang(0,20,0)))
    holoColor(A, vec(255,255,255))
    holoModel(A, "models/rlc_delta_lua/cstands/26L_independent.mdl")
#    holoEntity(A):setSubMaterial(1,"models/proppertextures/aluminum_brushed_worn_stained")
    holoParent(A, CS)
    holoBodygroup(A,1,1)
    holoBodygroup(A,2,RaisedIndLever ? 1 : 0)
    IndB = holoEntity(2)
    CS:setBonePosRelative(CS:boneIndex("ab_valve_pos"),vec(0,0,BrakeHeightOffset))
}
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# CCB
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

if(BrakeStand == 1){
    A = 1
    holoCreate(A, 
    CS:toWorld(vec(6.75,-19,32+BrakeHeightOffset)),
    vec(1,1,1),
    CS:toWorld(ang(0,20,0)))
    holoColor(A,vec(255,255,255))
    holoModel(A, "models/fox/knorr_ccb_brakestand.mdl")
    holoParent(A, CS)
    AutoB = holoEntity(1)
    IndB = holoEntity(1) 
}
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# FastBrake
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

if(BrakeStand == 2){
    A = 1
    holoCreate(A, 
    CS:toWorld(vec(6.75,-19,31+BrakeHeightOffset)),
    vec(0.9),
    CS:toWorld(ang(0,20,0)))
    holoColor(A,vec(255,255,255))
    holoModel(A, "models/rlc_delta_lua/accessories/wabtec_fastbrake_stand.mdl")
    holoParent(A, CS)
    AutoB = holoEntity(1)
    IndB = holoEntity(1) 
}

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# 24RL
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

if(BrakeStand == 3){
    A = 1
    holoCreate(A, 
    CS:toWorld(vec(17,-28,25)),
    vec(1),
    CS:toWorld(ang(0,20,0)))
    holoColor(A,vec(255,255,255))
    holoModel(A, "models/lazpack/detail/24rl_full.mdl")
    holoParent(A, CS)
    AutoB = holoEntity(1)
    IndB = holoEntity(1) 
}

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# 6SL
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

if(BrakeStand == 4){
    A = 1
    holoCreate(A, 
    CS:toWorld(vec(12,-32,0+BrakeHeightOffset)),
    vec(1),
    CS:toWorld(ang(0,200,0)))
    holoColor(A,vec(255,255,255))
    holoModel(A, "models/lazpack/stands/6sl_boned.mdl")
    holoParent(A, CS)
    AutoB = holoEntity(1)
    IndB = holoEntity(1) 
}

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#Air Brake Gauge 1
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    #Red    - MR
    #White  - ER
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    A = 3
    holoCreate(A, 
    CS:toWorld(CS:toLocal(CS:attachmentPos("gauge_1"))+vec(GaugeOffset,0,0)),
    vec(1,1,1),
    CS:toWorld(CS:toLocal(CS:attachmentAng("gauge_1"))+ang(0,0,0)))
    holoColor(A,vec(255,255,255))
    holoModel(A, "models/rlc_delta_lua/accessories/gauge_gw4.5_standard.mdl")
    holoEntity(A):setSubMaterial(7,Gauge1Skin)
    holoParent(A, CS)
    holoBodygroup(A,1,1)
    holoBodygroup(A,2,1)
    Gauge1 = holoEntity(3)

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#Air Brake Gauge 1
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    #Red    - BC
    #White  - BP
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    A = 4
    holoCreate(A, 
    CS:toWorld(CS:toLocal(CS:attachmentPos("gauge_2"))+vec(GaugeOffset,0,0)),
    vec(1,1,1),
    CS:toWorld(CS:toLocal(CS:attachmentAng("gauge_2"))+ang(0,0,0)))
    holoColor(A, vec(255,255,255))
    holoModel(A, "models/rlc_delta_lua/accessories/gauge_gw4.5_standard.mdl")
    holoEntity(A):setSubMaterial(7,Gauge2Skin)
    holoParent(A, CS)
    holoBodygroup(A,1,1)
    holoBodygroup(A,2,1)
    Gauge2 = holoEntity(4)

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    if(AFMInd){

    if(!AltAFM){

    A = 5
    holoCreate(A, 
    CS:toWorld(CS:toLocal(CS:attachmentPos("gauge_3"))+vec(GaugeOffset,0.01,0.05)),
    vec(1,1,1),
    CS:toWorld(CS:toLocal(CS:attachmentAng("gauge_3"))+ang(0,0,0)))
    holoColor(A, vec(255,255,255))
    holoModel(A, "models/rlc_delta_lua/accessories/gauge_gw4.5_standard.mdl")
    holoParent(A, CS)
    holoEntity(A):setSubMaterial(9,AFMGaugeSkinA)
    holoBodygroup(A,1,2)
    holoBodygroup(A,2,2)
    holoBodygroup(A,3,1)
    Gauge3 = holoEntity(5)

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    CalCurve = table()
    CalCurve[1,vector2] = vec2(0,-145)
    CalCurve[2,vector2] = vec2(20,-152)
    CalCurve[3,vector2] = vec2(40,-161)
    CalCurve[4,vector2] = vec2(60,-180)
    CalCurve[5,vector2] = vec2(80,-216)
    CalCurve[6,vector2] = vec2(100,-245)

    }else{

    A = 5
    holoCreate(A, 
    CS:toWorld(CS:toLocal(CS:attachmentPos("gauge_3"))+vec(GaugeOffset,0.01,0.05)),
    vec(1,1,1),
    CS:toWorld(CS:toLocal(CS:attachmentAng("gauge_1"))+ang(0,0,0)))
    holoColor(A, vec(255,255,255))
    holoModel(A, "models/rlc_delta_lua/accessories/gauge_gw4.5_standard.mdl")
    holoParent(A, CS)
    holoEntity(A):setSubMaterial(8,AFMGaugeSkinB)
    holoEntity(A):setSubMaterial(9,AFMGaugeSkinA)
    holoBodygroup(A,1,3)
    holoBodygroup(A,2,2)
    holoBodygroup(A,3,1)
    Gauge3 = holoEntity(5)

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------    

    CalCurve = table()
    CalCurve[1,vector2] = vec2(0,-120)
    CalCurve[2,vector2] = vec2(14,-244)
        
    }
    
    }

    A = 6
    holoCreate(A, 
    CS:toWorld(CS:toLocal(CS:attachmentPos("gauge_3"))+vec(GaugeOffsetLoad,6.5,0)),
    vec(1,1,1),
    CS:toWorld(CS:toLocal(CS:attachmentAng("gauge_1"))+ang(0,0,0)))
    holoColor(A, vec(255,255,255))
    holoModel(A, "models/gsgtrainprops/parts/cab/anim/gauge_load_emd_radial_anim.mdl")
    holoParent(A, CS)
    holoEntity(A):setSubMaterial(3,AmmeterSkin)
    Gauge4 = holoEntity(6)
    
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    if(AFMInd){
        local AirFlow = 0
        local CFMA = abs(CFM)
        
        for(N=2,CalCurve:ncount()){
            local Point1 = CalCurve[N-1,vector2]
            local Point2 = CalCurve[N,vector2]
            local X1 = Point1:x()
            local X2 = Point2:x()
            local Y1 = Point1:y()
            local Y2 = Point2:y()
            if(CFMA<X2){ #Is the CFM below the upper bound of this curve segment?
                local Frac = (CFMA-X1)/(X2-X1)
                AirFlow = Y1 + Frac*(Y2-Y1)
                break
            }else{ #Set it to the upper limit. If it reaches the end of the table, it'll clamp.
                AirFlow = Y2
            }
        }

    }

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#J-Hook
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

if(HornLeverType == 0){
    A = 7
    holoCreate(A, 
    CS:toWorld(vec(4.55,-12.7,38+HornLeverOffset)),
    vec(1,1,1),
    CS:toWorld(ang(0,0,0)))
    holoColor(A, vec(255,255,255))
    holoModel(A, "models/rlc_delta_lua/cstands/horn_valve.mdl")
    holoParent(A, CS)
    Hjonker = holoEntity(7)
}
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#Solenoid 1
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

if(HornLeverType == 1){
    A = 7
    holoCreate(A, 
    CS:toWorld(vec(5.25,-12.7,38+HornLeverOffset)),
    vec(1,1,1),
    CS:toWorld(ang(0,-90+20,0)))
    holoColor(A, vec(255,255,255))
    holoModel(A, "models/fox/solenoid.mdl")
    holoParent(A, CS)
    Hjonker = holoEntity(7)
}
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#Solenoid 2
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

if(HornLeverType == 2){
    A = 7
    holoCreate(A, 
    CS:toWorld(vec(4.25,-12.7,38+HornLeverOffset)),
    vec(1,1,1),
    CS:toWorld(ang(0,90+20,90)))
    holoColor(A, vec(255,255,255))
    holoModel(A, "models/sps_pack/misc/solenoid_lever.mdl")
    holoParent(A, CS)
    Hjonker = holoEntity(7)
}
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#Solenoid 3
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

if(HornLeverType == 3){
    A = 7
    holoCreate(A, 
    CS:toWorld(vec(4.55,-12.7,38+HornLeverOffset)),
    vec(1,1,1),
    CS:toWorld(ang(90,-90+20,0)))
    holoColor(A, vec(255,255,255))
    holoModel(A, "models/rlc_delta_lua/cstands/buttons.mdl")
    holoParent(A, CS)
    holoBodygroup(A,0,6)
    Hjonker = holoEntity(7)
}

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#Solenoid Button
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

if(HornLeverType == 4){
    A = 7
    holoCreate(A, 
    CS:toWorld(vec(4.55,-12.7,38+HornLeverOffset)),
    vec(1,1,1),
    CS:toWorld(ang(90,-90+20,0)))
    holoColor(A, vec(255,255,255))
    holoModel(A, "models/rlc_delta_lua/cstands/buttons.mdl")
    holoParent(A, CS)
    holoBodygroup(A,0,1)
    Hjonker = holoEntity(7)
}

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#Stand Extension
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

if(AmtrakF40PHStand){
    CS:setBodygroup(0,1)
    A = 8
    holoCreate(A, 
    CS:toWorld(vec(1.9,12.55,30.5)),
    vec(1,1,1),
    CS:toWorld(ang(0,0,0)))
    holoColor(A, vec(255,255,255))
    holoModel(A, "models/rlc_delta_lua/cstands/amtk_cstand_extension.mdl")
    holoParent(A, CS)
    holoEntity(A):setSubMaterial(1,"models/proppertextures/acrylic2_black_hw")  
    Speedo = holoEntity(8) 
    
    A = 9
    holoCreate(A, 
    CS:toWorld(vec(4.98,15.25,33.2)),
    vec(1,1,1),
    CS:toWorld(ang(90,67.35,90)))
    holoColor(A, vec(255,255,255))
    holoModel(A, "models/gsgtrainprops/parts/cab/anim/gauge_load_emd_radial_anim.mdl")
    holoParent(A, CS)
    holoEntity(A):setSubMaterial(3,SpeedometerSkin)
    Gauge5 = holoEntity(9)

    A = 10
    holoCreate(A, 
    CS:toWorld(vec(5.1,15.25,28)),
    vec(1,1,1),
    CS:toWorld(ang(90,67.35,90)))
    holoColor(A, vec(255,255,255))
    holoModel(A, "models/rlc_delta_lua/accessories/emd_hdlt.mdl")
    holoParent(A, CS)
    holoEntity(A):setSubMaterial(1,"powertrain/materials/control_switches/speed_control")
    holoBodygroup(A,1,1)
    SpeedControlSwitch = holoEntity(10)

}else{
    CS:setBodygroup(0,0)
}

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#Broken Buttons
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#[
#Sand Button
    A = 11
    holoCreate(A, 
    CS:toWorld(vec(4.55,-12.7,33)),
    vec(1,1,1),
    CS:toWorld(ang(90,-90+20,0)))
    holoColor(A, vec(255,255,255))
    holoModel(A, "models/rlc_delta_lua/cstands/buttons.mdl")
    holoParent(A, CS)
    holoBodygroup(A,0,6)
    holoEntity(A):setSubMaterial(1,"models/proppertextures/aluminum_new_worn")
    holoEntity(A):setSubMaterial(2,"models/proppertextures/bronze_worn")
    holoEntity(A):setSubMaterial(7,"models/proppertextures/brass_new")
    SandButton = holoEntity(11)
#Bell Button
    A = 12
    holoCreate(A, 
    CS:toWorld(vec(4.55,-12.7,28)),
    vec(1,1,1),
    CS:toWorld(ang(90,-90+20,0)))
    holoColor(A, vec(255,255,255))
    holoModel(A, "models/rlc_delta_lua/cstands/buttons.mdl")
    holoParent(A, CS)
    holoBodygroup(A,0,7)
    holoEntity(A):setSubMaterial(1,"models/proppertextures/aluminum_new_worn")
    holoEntity(A):setSubMaterial(2,"models/proppertextures/bronze_worn")
    holoEntity(A):setSubMaterial(7,"models/proppertextures/brass_new")
    BellButton = holoEntity(12)
]#
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#Crew Call Alarm Buttons
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    A = 13
    holoCreate(A, 
    CS:toWorld(vec(2.5,-2,21)),
    vec(1,1,1),
    CS:toWorld(ang(90,-90,0)))
    holoColor(A, vec(255,255,255))
    holoModel(A, "models/rlc_delta_lua/cstands/buttons.mdl")
    holoParent(A, CS)
    holoBodygroup(A,0,0)
    A = 14
    holoCreate(A, 
    CS:toWorld(vec(2.5,3,21)),
    vec(1,1,1),
    CS:toWorld(ang(90,-90,0)))
    holoColor(A, vec(255,255,255))
    holoModel(A, "models/rlc_delta_lua/cstands/buttons.mdl")
    holoParent(A, CS)
    holoBodygroup(A,0,0)

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Switch Labels
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    A = 15
    holoCreate(A, 
    CS:toWorld(vec(3.75,8.46,34.1)),
    vec(0.063),
    CS:toWorld(ang(90,90,90)))
    holoColor(A, vec(255,255,255))
    holoModel(A, "plane")
    holoParent(A, CS)
    A = 16
    holoCreate(A, 
    CS:toWorld(vec(3.75,9.46,34.1)),
    vec(0.063),
    CS:toWorld(ang(90,90,90)))
    holoColor(A, vec(255,255,255))
    holoModel(A, "plane")
    holoParent(A, CS)
    A = 17
    holoCreate(A, 
    CS:toWorld(vec(3.75,10.46,34.1)),
    vec(0.063),
    CS:toWorld(ang(90,90,90)))
    holoColor(A, vec(255,255,255))
    holoModel(A, "plane")
    holoParent(A, CS)

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    
    A = 18
    holoCreate(A, 
    CS:toWorld(vec(3.75,8.46,30.35)),
    vec(0.063),
    CS:toWorld(ang(90,90,90)))
    holoColor(A, vec(255,255,255))
    holoModel(A, "plane")
    holoParent(A, CS)
    A = 19
    holoCreate(A, 
    CS:toWorld(vec(3.75,9.46,30.35)),
    vec(0.063),
    CS:toWorld(ang(90,90,90)))
    holoColor(A, vec(255,255,255))
    holoModel(A, "plane")
    holoParent(A, CS)
    A = 20
    holoCreate(A, 
    CS:toWorld(vec(3.75,10.46,30.35)),
    vec(0.063),
    CS:toWorld(ang(90,90,90)))
    holoColor(A, vec(255,255,255))
    holoModel(A, "plane")
    holoParent(A, CS)

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    A = 21
    holoCreate(A, 
    CS:toWorld(vec(3.75,-10.03,30.35)),
    vec(0.063),
    CS:toWorld(ang(90,90,90)))
    holoColor(A, vec(255,255,255))
    holoModel(A, "plane")
    holoParent(A, CS)
    A = 22
    holoCreate(A, 
    CS:toWorld(vec(3.75,-9.03,30.35)),
    vec(0.063),
    CS:toWorld(ang(90,90,90)))
    holoColor(A, vec(255,255,255))
    holoModel(A, "plane")
    holoParent(A, CS)
    A = 23
    holoCreate(A, 
    CS:toWorld(vec(3.75,-8.03,30.35)),
    vec(0.063),
    CS:toWorld(ang(90,90,90)))
    holoColor(A, vec(255,255,255))
    holoModel(A, "plane")
    holoParent(A, CS)

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#Radio
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

if(RadioType==1){
    A++
    holoCreate(A, 
    CS:toWorld(vec(3,-20,42+RadioHeightOffset)),
    vec(1,1,1),
    CS:toWorld(ang(0,290,0)))
    holoColor(A, vec(255,255,255))
    holoModel(A, "models/rlc_delta_lua/accessories/motorola_spectra.mdl")
    holoParent(A, CS)
    holoBodygroup(A,0,0)    
}elseif(RadioType==2){
    A++
    holoCreate(A, 
    CS:toWorld(vec(-2,-3,15+RadioHeightOffset)),
    vec(1,1,1),
    CS:toWorld(ang(0,150,0)))
    holoColor(A, vec(255,255,255))
    holoModel(A, "models/sps_pack/misc/f7_barrel_stand_detail.mdl")
    holoParent(A, CS)
    holoBodygroup(A,0,1)  
    holoClipEnabled(A,1,1)     
    holoClip(A,1,vec(0,0,30),vec(0,0,1),0)
}elseif(RadioType==0){
}

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#High Voltage Warning Labels
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    A++
    holoCreate(A, 
    CS:toWorld(vec(-5.75,0,35)),
    vec(0.5,0.75,1),
    CS:toWorld(ang(90,270,90)))
    holoColor(A, vec(255,255,255))
    holoModel(A, "plane")
    holoParent(A, CS)
    holoEntity(A):setSubMaterial(1,"models/rlc_delta_lua/cstands/voltage_warning_early")
    A++
    holoCreate(A, 
    CS:toWorld(vec(-5.75,0,18)),
    vec(0.5,0.75,1),
    CS:toWorld(ang(90,270,90)))
    holoColor(A, vec(255,255,255))
    holoModel(A, "plane")
    holoParent(A, CS)
    holoEntity(A):setSubMaterial(1,"models/rlc_delta_lua/cstands/voltage_warning_early")
    A++
    holoCreate(A, 
    CS:toWorld(vec(-2.75,-21,35)),
    vec(0.5,0.75,1),
    CS:toWorld(ang(90,290,90)))
    holoColor(A, vec(255,255,255))
    holoModel(A, "plane")
    holoParent(A, CS)
    holoEntity(A):setSubMaterial(1,"models/rlc_delta_lua/cstands/voltage_warning_early")
    A++
    holoCreate(A, 
    CS:toWorld(vec(-2.75,-21,18)),
    vec(0.5,0.75,1),
    CS:toWorld(ang(90,290,90)))
    holoColor(A, vec(255,255,255))
    holoModel(A, "plane")
    holoParent(A, CS)
    holoEntity(A):setSubMaterial(1,"models/rlc_delta_lua/cstands/voltage_warning_early")

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#End Holos
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------




#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#Bone Index Tables
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
if(Plate == 1){
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    DynBone = Panel:boneIndex("dynamic")        
    RevBone = Panel:boneIndex("reverser")
    ThrBone = Panel:boneIndex("throttle")
    CS:setBodygroup(2,2)
}

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
elseif(Plate == 2){
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    SelBone    = Panel:boneIndex("selector")
    SelWhlBone = Panel:boneIndex("selector_wheel")
    RevBone    = Panel:boneIndex("reverser")
    ThrBone    = Panel:boneIndex("throttle")
    ThrWhlBone = Panel:boneIndex("throttle_wheel")
    CS:setBodygroup(2,2)
}

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
elseif(Plate == 3){
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    DynBone = Panel:boneIndex("dynamic")        
    RevBone = Panel:boneIndex("reverser")
    ThrBone = Panel:boneIndex("throttle")
    CS:setBodygroup(2,2)
}

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
if(Plate == 0){
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    DynBone = CS:boneIndex("dynamic")        
    RevBone = CS:boneIndex("reverser")
    ThrBone = CS:boneIndex("throttle")
}

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
if(BrakeStand == 0){    
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    TBBone  = AutoB:boneIndex("trainbrake")
    CutSw   = AutoB:boneIndex("brake_cut")
    LBBone  = IndB:boneIndex("locobrake")
    LBLever = IndB:boneIndex("locobrake_handle")
}

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
if(BrakeStand == 1){
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    TBBone = AutoB:boneIndex("Autobrake")
    LBBone = AutoB:boneIndex("IndeBrake1")
    CutSw  = AutoB:boneIndex("AutoCutin")
    CutSw2 = AutoB:boneIndex("IndeCutin")  
}

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
if(BrakeStand == 2){
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    TBBone = AutoB:boneIndex("brake_tb")
    LBBone = IndB:boneIndex("brake_lb")
}

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
if(BrakeStand == 3){
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    SafetyControl   = AutoB:boneIndex("safetycontrolhandle")
    SafetyControl2  = AutoB:boneIndex("safetycontrolhinge")

    TBBone   = AutoB:boneIndex("autobrake")
    TBDetent = AutoB:boneIndex("autobrakelatch")
    CutSw    = AutoB:boneIndex("bpcohandle")
    CutHinge = AutoB:boneIndex("bpcohinge")
    FSHandle = AutoB:boneIndex("firstservicehandle")
    FRHandle = AutoB:boneIndex("fullreleasehandle")
 
    LBBone     = AutoB:boneIndex("independentrotate")
    LBLever    = AutoB:boneIndex("independenthandle")
    BailPiston = AutoB:boneIndex("bailpiston")
    BailRing   = AutoB:boneIndex("bailring")
}

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
if(BrakeStand == 4){
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    BellBone     = AutoB:boneIndex("bell")
    SanderSwitch = AutoB:boneIndex("sander")

    TBBone   = AutoB:boneIndex("automatic")
    TBDetent = AutoB:boneIndex("automatic_detent")
    CutSw    = AutoB:boneIndex("bpco")
 
    LBBone  = AutoB:boneIndex("independent_rotate")
    LBLever = AutoB:boneIndex("independent_bail")
}

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
if(HornLeverType == 0){
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    HornBone = Hjonker:boneIndex("horn_lever")
}

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
if(HornLeverType == 3){
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    HornBone = Hjonker:boneIndex("btn")
}

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
if(HornLeverType == 4){
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    HornBone = Hjonker:boneIndex("btn")
}

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    BellBone    = BellButton:boneIndex("btn")
    SanderBone  = SandButton:boneIndex("btn")
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    Red1 = Gauge1:boneIndex("needle_1")
    Wht1 = Gauge1:boneIndex("needle_2")
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    Red2 = Gauge2:boneIndex("needle_1")
    Wht2 = Gauge2:boneIndex("needle_2")
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    AFM =   Gauge3:boneIndex("needle_1")
    AFM_M = Gauge3:boneIndex("needle_2")
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    Load = Gauge4:boneIndex("emd_load_bone")    
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    MPHBone = Gauge5:boneIndex("emd_load_bone")  
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------        
    EngRunBone      = CS:boneIndex("sw_1")
    GenFieldBone    = CS:boneIndex("sw_2")
    FuelPumpBone    = CS:boneIndex("sw_3")
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    AuxSwitch1Bone    = CS:boneIndex("sw_4")
    AuxSwitch2Bone    = CS:boneIndex("sw_5")
    AuxSwitch3Bone    = CS:boneIndex("sw_6")
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    GroundLightsBone  = CS:boneIndex("sw_10")
    StepLightsBone    = CS:boneIndex("sw_11")
    GaugeLightsBone   = CS:boneIndex("sw_12")  
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    MU2ASwitchBone  = CS:boneIndex("mu2a")
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    function vector linpos(V1:vector, V2:vector, P){
        return V1 + P*(V2-V1)
    }
    
    function normal adc(MinVal, MaxVal, Resolution, Input){
        local Output = 0
        if(inrange(Input,MinVal,MaxVal)){
            Output = round(Resolution*((Input - MinVal)/(MaxVal-MinVal)))
            
        }elseif(Input < MinVal){
            Output = 0
        }elseif(Input > MaxVal){
            Output = Resolution
        }
        
        return Output
    }
    
    function normal dac(MinVal, MaxVal, Resolution, Input){
        local Output = 0
        if(inrange(Input,0,Resolution)){
            Input = round(Input)
            Output = (MaxVal - MinVal)*(Input/Resolution) + MinVal
        }elseif(Input < 0){
            Output = MinVal
        }elseif(Input > Resolution){
            Output = MaxVal
        }
        return Output
    }
    
    function void printProper(Message:string){
        local Engr = Pod:driver()
        if(Engr:isValid()){
            Pod:printDriver(Message)
        }
        if(Engr != owner()){
            print(Message)
        }
        return void
    }

    ControlPrintOrder = array(
        "ReverserF",
        "ReverserB",
        "IncreaseThrottle",
        "DecreaseThrottle",
        "IncreaseDynamics",
        "DecreaseDynamics",
        "SelectorUp",
        "SelectorDown",
        "IncreaseTrainBrake",
        "DecreaseTrainBrake",
        "IncreaseLocoBrake",
        "DecreaseLocoBrake",
        "EmergencyBrake",
        "HandBrake",
        "Sander",
        "UseButtons"
    )

    #Controls Init
    foreach(K,V:string = Controls){
        if(V:find(" +Shift")){
            Routing[K,number] = 1
            local EXP = V:explode(" ")
            Controls[K,string] = EXP[1,string]
        }else{
            Routing[K,number] = 0
        }
    }

    CtlTable["AirBrakeMode",number] = AirBrakeMode
    CtlTable["InitialReduction",number] = InitialReduction
    CtlTable["NotchedThrottle",number] = NotchedThrottle
    CtlTable["NumThrottleNotches",number] = NumThrottleNotches
    CtlTable["NotchedDynamics",number] = NotchedDynamics
    CtlTable["TransitionMode",number] = TransitionMode
    CtlTable["TransitionControlType",number] = TransitionControlType
    
    if(AirBrakeMode==2){#26L
        SetBrakeNotch = 2
    }elseif(AirBrakeMode>=3){#24RL/6SL
        SetBrakeNotch = 4 
        #print("Yarg")   
    }elseif(AirBrakeMode == 1){#Simple ML
        SetBrakeNotch = 2
    }else{ #Simple SL
        SetBrakeNotch = 0
    }
    LocoBrakeNotch = 0
    
    CONSTANT = 1

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    #Control Stand Init
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    CtlTable["CTL_Version",string] = CTL_Version
    setName("RLC PT2 Control Stand ("+CtlTable["CS_Version",string]+")\nAAR Standard\n"+select(AirBrakeMode+1,"Simple SL","Simple ML","26-L","24-RL","No.6")+" with "+(LocoBrakeMode ? "ML" : "SL")+" Independents")
    runOnChat(1)
    timer("clk",100)
}
if(MU_Master){

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    #MASTER MODE
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    local Driver = noentity()
    local PodDriver = Pod:driver()
    if(RemoteControl | RemoteMode){
        if(Active & !PodDriver){
            Driver = owner()
        }
    }else{
        Driver = Pod:driver()
    }
    if(Driver & !DriverQ){
        DriverQ = 1
        runOnKeys(Driver,1)
    }elseif(!Driver & DriverQ){
        DriverQ = 0
        runOnKeys(DriverOld,0)
    }
    DriverOld = Driver
    
    if(keyClk(Driver)){
        local Shifting = Driver:keyPressed(Shift)
        
        UseButton = Driver:keyPressed(Controls["UseButton",string]) & (Routing["UseButton",number] ? Shifting : !Shifting)
        
        if(!UseButton){
        
            local RF = UsingRearSeat ? "ReverserB" : "ReverserF"
            local RB = UsingRearSeat ? "ReverserF" : "ReverserB"
            
            ReverserF = Driver:keyPressed(Controls[RF,string]) & (Routing[RF,number] ? Shifting : !Shifting)
            ReverserB = Driver:keyPressed(Controls[RB,string]) & (Routing[RB,number] ? Shifting : !Shifting)
            
            IncreaseThrottle = Driver:keyPressed(Controls["IncreaseThrottle",string]) & (Routing["IncreaseThrottle",number] ? Shifting : !Shifting)
            DecreaseThrottle = Driver:keyPressed(Controls["DecreaseThrottle",string]) & (Routing["DecreaseThrottle",number] ? Shifting : !Shifting)
            
            IncreaseTrainBrake = Driver:keyPressed(Controls["IncreaseTrainBrake",string]) & (Routing["IncreaseTrainBrake",number] ? Shifting : !Shifting)
            DecreaseTrainBrake = Driver:keyPressed(Controls["DecreaseTrainBrake",string]) & (Routing["DecreaseTrainBrake",number] ? Shifting : !Shifting)
            
            IncreaseLocoBrake = Driver:keyPressed(Controls["IncreaseLocoBrake",string]) & (Routing["IncreaseLocoBrake",number] ? Shifting : !Shifting)
            DecreaseLocoBrake = Driver:keyPressed(Controls["DecreaseLocoBrake",string]) & (Routing["DecreaseLocoBrake",number] ? Shifting : !Shifting)
            
            IncreaseDynamics = Driver:keyPressed(Controls["IncreaseDynamics",string]) & (Routing["IncreaseDynamics",number] ? Shifting : !Shifting)
            DecreaseDynamics = Driver:keyPressed(Controls["DecreaseDynamics",string]) & (Routing["DecreaseDynamics",number] ? Shifting : !Shifting)
            
            EmergencyBrake = Driver:keyPressed(Controls["EmergencyBrake",string]) & (Routing["EmergencyBrake",number] ? Shifting : !Shifting)
            
            HandBrake = Driver:keyPressed(Controls["HandBrake",string]) & (Routing["HandBrake",number] ? Shifting : !Shifting)
            Sander = Driver:keyPressed(Controls["Sander",string]) & (Routing["Sander",number] ? Shifting : !Shifting)

            KeySelUp = SelectorUp = Driver:keyPressed(Controls["SelectorUp",string]) & (Routing["SelectorUp",number] ? Shifting : !Shifting)
            KeySelDn = SelectorDown = Driver:keyPressed(Controls["SelectorDown",string]) & (Routing["SelectorDown",number] ? Shifting : !Shifting)            
        }
    }
}else{
    if(DriverQ){
        DriverQ = 0
        runOnKeys(owner(),0)
    }
}
if(clk("clk")){
    local Tick = 1
    Dynamics = SetDynamics>0
    
    #Throttle
    if(!Dynamics){
        if(NotchedThrottle){
            if(IncreaseThrottle & !NQ & (Notch<NumThrottleNotches)){
                NQ = 1
                Notch++
                soundStop(1)
                Pod:soundPlay(1,0.5,"rlc_delta/cstands/throttle/U"+Notch+".wav")
                Pod:soundPlay(1,0.5,Lever_Throttle)
            }elseif(DecreaseThrottle & !NQ & (Notch>0)){
                NQ = 1
                Notch--
                soundStop(1)
                Pod:soundPlay(1,0.5,"rlc_delta/cstands/throttle/D"+Notch+".wav")
            }elseif(!IncreaseThrottle & !DecreaseThrottle & NQ){
                NQ = 0
                #soundStop(1)
            }
            SetThrottle = dac(0,100,NumThrottleNotches,Notch)
        }else{
            SetThrottle += (IncreaseThrottle - DecreaseThrottle)*5
            SetThrottle = clamp(SetThrottle,0,100)
            Notch = adc(0,100,NumThrottleNotches,SetThrottle)
        }
    }

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------    
    #Hump Control
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    SetHumpMul = ->HumpMultiplier ? HumpMultiplier : 1
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    #Dynamic Brakes
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    if((SetThrottle==0) & HasDynamics & (abs(SetReverser)==1)){
        if((SetDynamics==0) & IncreaseDynamics & !DNQ){
            DNQ = 1
            DynaNotch = 0
            SetDynamics = 10
            soundStop(1)
            Pod:soundPlay(1,0.5,"rlc_delta/cstands/throttle/D7.wav")
            Pod:soundPlay(1,0.5,Lever_Throttle)
        }elseif((SetDynamics==10) & DecreaseDynamics & !DNQ){
            DNQ = 1
            DynaNotch = -1
            SetDynamics = 0
            soundStop(1)
            Pod:soundPlay(1,0.5,"rlc_delta/cstands/throttle/D0.wav")
            Pod:soundPlay(1,0.5,Lever_Throttle)
        }
        
        if(Dynamics & NotchedDynamics){
            if(IncreaseDynamics & !DNQ & (DynaNotch<NumThrottleNotches)){
                DNQ = 1
                Pod:soundPlay(20,0,Motor_DB)
                DynaNotch++
                soundStop(1)
                Pod:soundPlay(1,0.5,Lever_Throttle)
            }elseif(DecreaseDynamics & !DNQ & (DynaNotch>-1)){
                DNQ = 1
                DynaNotch--
                soundStop(1)
                Pod:soundPlay(1,0.5,Lever_Throttle)
            }
            if(DynaNotch>-1){SetDynamics = dac(10,100,NumThrottleNotches,DynaNotch)}
        }elseif(Dynamics){
            if(IncreaseDynamics & (SetDynamics<100) & !DNQ){
                SetDynamics++
                if(SetDynamics>100){SetDynamics=100}
            }elseif(DecreaseDynamics & (SetDynamics>10)){
                DNQ = 1
                SetDynamics--
                if(SetDynamics<10){SetDynamics=10,DNQ=1}
            }
            DynaNotch = adc(10,100,NumThrottleNotches,SetDynamics)
        }
        if(!IncreaseDynamics & !DecreaseDynamics & DNQ){
            DNQ = 0
        }
    }

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    #Selector
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    if((TransitionMode==1) & (TransitionControlType<2)){
        if(SelectorUp & !TransitionQ){
            TransitionQ = 1
            if(SetSelector<4){
                SetSelector++
                soundStop(1)
                Pod:soundPlay(1,0.5,Lever_Throttle)
            }
        }elseif(SelectorDown & !TransitionQ){
            TransitionQ = 1
            if(SetSelector>0){
                SetSelector--
                soundStop(1)
                Pod:soundPlay(1,0.5,Lever_Throttle)
            }
        }elseif(!SelectorUp & !SelectorDown & TransitionQ){
            TransitionQ = 0
        }
        
    }

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    #Reverser
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

if(FancyReverserSounds==1){
    if((SetThrottle==0) & (!Dynamics)){
        if(ReverserF & !RevQ & (SetReverser<1)){
            RevQ = 1
            SetReverser++
            soundStop(1)
            Pod:soundPlay(1,0.5,(SetReverser==0) ? Lever_ReverserFN : Lever_ReverserNF)
            Pod:soundPlay(20,0,Motor_F)
        }elseif(ReverserB & !RevQ & (SetReverser>-1)){
            RevQ = 1
            SetReverser--
            soundStop(1)
            Pod:soundPlay(1,0.5,(SetReverser==0) ? Lever_ReverserRN : Lever_ReverserNR)
            Pod:soundPlay(20,0,Motor_R)
        }elseif(!ReverserF & !ReverserB & RevQ){
            RevQ = 0
        }
    }
}else{
    if((SetThrottle==0) & (!Dynamics)){
        if(ReverserF & !RevQ & (SetReverser<1)){
            RevQ = 1
            SetReverser++
            soundStop(1)
            Pod:soundPlay(1,5,(SetReverser==0) ? Lever_ReverserN : Lever_ReverserF)
        }elseif(ReverserB & !RevQ & (SetReverser>-1)){
            RevQ = 1
            SetReverser--
            soundStop(1)
            Pod:soundPlay(1,5,(SetReverser==0) ? Lever_ReverserN : Lever_ReverserB)
        }elseif(!ReverserF & !ReverserB & RevQ){
            RevQ = 0
        }
    }
}

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    #Train Brakes
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    local FSP = FeedPressure*64/90 #Full Service Point
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    if(AirBrakeMode==4){ #6SL
        #0-Release
        #1-Running
        #2-Holding
        #3-Lap
        #4-Service
        #6-Emergency
        if(IncreaseTrainBrake & (SetBrakeNotch < 4) & !ABQ){
            ABQ = 1
            SetBrakeNotch++
            soundStop(2)
            Pod:soundPlay(2,5,Lever_ABNotch)
            if(SetBrakeNotch==4 & (SetEqualRes>FSP) & !HissQ){
                HissQ = 1
                ApplyQ = 1
                Pod:soundPlay(3,0,AirBrakeApplyLoop)
            }
        }elseif(DecreaseTrainBrake & (SetBrakeNotch > 0) & !ABQ){
            ABQ = 1
            if(SetBrakeNotch==6){
                SetBrakeNotch=4
            }else{
                SetBrakeNotch--
            }
            soundStop(2)
            Pod:soundPlay(2,5,Lever_ABNotch)
            if(SetBrakeNotch<=1 & (SetEqualRes<FeedPressure) & !HissQ){
                HissQ = 1
                Pod:soundPlay(3,10,AirBrakeRelease)
                timer("EndHiss2",6000)
            }
            if(SetBrakeNotch==4 & (SetEqualRes<FeedPressure) & !HissQ){
                HissQ = 1
                Pod:soundPlay(3,10,Lever_ABEmergencyRecover)
                timer("EndHiss2",6000)
            }
        }elseif(!IncreaseTrainBrake & !DecreaseTrainBrake & ABQ){
            #soundStop(3)
            ABQ = 0
        }
        switch(SetBrakeNotch){
            case 0, #Release
                if(SetEqualRes<FeedPressure){
                    SetEqualRes+=0.5
                    if(SetEqualRes>FeedPressure){SetEqualRes=FeedPressure}
                }
                break
            case 1, #Running
                if(SetEqualRes<FeedPressure){
                    SetEqualRes+=0.5
                    if(SetEqualRes>FeedPressure){SetEqualRes=FeedPressure}
                }
                break
            case 2, #Holding
                if(SetEqualRes<FeedPressure){
                    SetEqualRes+=0.5
                    if(SetEqualRes>FeedPressure){SetEqualRes=FeedPressure}
                }
                break
            case 4, #Service
                if(SetEqualRes>FSP){
                    SetEqualRes-=0.5
                    if(SetEqualRes<FSP){SetEqualRes=FSP}
                }
                break
            default,
                break
        }
        if(ApplyQ&(SetBrakeNotch!=4|(SetEqualRes<(FSP+1)))){
            ApplyQ=0
            HissQ=0
            soundStop(3)
            Pod:soundPlay(3,5,AirBrakeApplyEnd)
        }
    }elseif(AirBrakeMode==3){ #24RL
        #0-Release
        #1-Running
        #2-First Service
        #3-Lap
        #4-Service
        #6-Emergency
        if(IncreaseTrainBrake & (SetBrakeNotch < 4) & !ABQ){
            ABQ = 1
            SetBrakeNotch++
            soundStop(2)
            Pod:soundPlay(2,5,Lever_ABNotch)
            if(SetBrakeNotch==4 & (SetEqualRes>FSP) & !HissQ){
                HissQ = 1
                ApplyQ = 1
                Pod:soundPlay(3,0,AirBrakeApplyLoop)
            }elseif(SetBrakeNotch==2 & (SetEqualRes>(FeedPressure-InitialReduction))){
                SetEqualRes = FeedPressure-InitialReduction
                HissQ = 1
                timer("EndHiss",1200)
            }
        }elseif(DecreaseTrainBrake & (SetBrakeNotch > 0) & !ABQ){
            ABQ = 1
            if(SetBrakeNotch==6){
                SetBrakeNotch=4
            }else{
                SetBrakeNotch--
            }
            soundStop(2)
            Pod:soundPlay(2,5,Lever_ABNotch)
            if(SetBrakeNotch<=1 & (SetEqualRes<FeedPressure) & !HissQ){
                HissQ = 1
                Pod:soundPlay(3,10,AirBrakeRelease)
                timer("EndHiss2",6000)
            }
        }elseif(!IncreaseTrainBrake & !DecreaseTrainBrake & ABQ){
            #soundStop(3)
            ABQ = 0
        }
        switch(SetBrakeNotch){
            case 0, #Release
                if(SetEqualRes<FeedPressure){
                    SetEqualRes+=0.5
                    if(SetEqualRes>FeedPressure){SetEqualRes=FeedPressure}
                }
                break
            case 1, #Running
                if(SetEqualRes<FeedPressure){
                    SetEqualRes+=0.5
                    if(SetEqualRes>FeedPressure){SetEqualRes=FeedPressure}
                }
                break
            case 4, #Service
                if(SetEqualRes>FSP){
                    SetEqualRes-=0.5
                    if(SetEqualRes<FSP){SetEqualRes=FSP}
                }
                break
            default,
                break
        }
        if(ApplyQ&(SetBrakeNotch!=4|(SetBrakeNotch==4&SetEqualRes<=FSP))&SetBrakeNotch!=2){
            ApplyQ=0
            HissQ=0
            soundStop(3)
            Pod:soundPlay(3,5,AirBrakeApplyEnd)
        }
    }elseif(AirBrakeMode==2){#26L
    #0-Release
    #1-Minimum Reduction / Service
    #2-Suppression
    #6-Emergency
        if(IncreaseTrainBrake){
            if(!ABQ){
                ABQ = 1
                if(SetBrakeNotch==0){
                    Lock_26L = 1
                    SetBrakeNotch=1
                    soundStop(2)
                    Pod:soundPlay(2,5,Lever_ABNotch)
                    Pod:soundPlay(3,10,AirBrakeApplyInitial)
                    SetEqualRes = FeedPressure-InitialReduction
                    if(!HissQ){
                        HissQ = 1
                        Pod:soundPlay(3,10,AirBrakeApplyLoop)
                        timer("EndHiss",1000)
                    }
                }elseif((SetBrakeNotch==1) & (SetEqualRes>FSP)){
                    soundStop(2)
                    Pod:soundPlay(2,5,Lever_ABMove)
                    if(!HissQ){
                        HissQ = 1
                        ApplyQ = 1
                        Pod:soundPlay(3,0,AirBrakeApplyLoop)
                    }
                }elseif((SetBrakeNotch==1) & (SetEqualRes==FSP)){
                    SetBrakeNotch=2
                    soundStop(2)
                    Pod:soundPlay(2,5,Lever_ABSuppressionOn)
                    Suppression = 1
                }
            }
            if((SetBrakeNotch==1) & (SetEqualRes>FSP) & !Lock_26L){
                SetEqualRes-=0.5
                if(SetEqualRes<FSP){SetEqualRes=FSP}
            }
        }elseif(DecreaseTrainBrake){
            if(!ABQ){
                ABQ = 1
                if((SetBrakeNotch==1) & (SetEqualRes==(FeedPressure-InitialReduction))){
                    SetBrakeNotch=0
                    soundStop(2)
                    Pod:soundPlay(2,5,Lever_ABRelease)
                    SetEqualRes = FeedPressure
                    if(!HissQ){
                        HissQ = 1
                        Pod:soundPlay(3,10,AirBrakeRelease)
                        timer("EndHiss2",6000)
                    }
                }elseif((SetBrakeNotch==1) & (SetEqualRes<FeedPressure)){
                    soundStop(2)
                    Pod:soundPlay(2,5,Lever_ABMove)
                    if(!HissQ & (SetEqualRes<FeedPressure)){
                        HissQ = 1
                        Pod:soundPlay(3,10,AirBrakeRelease)
                        timer("EndHiss2",6000)
                    }
                }elseif((SetBrakeNotch==2)){
                    Lock_26L = 1
                    SetBrakeNotch=1
                    soundStop(2)
                    Pod:soundPlay(2,5,Lever_ABSuppressionOff)
                    Suppression = 0
                }elseif(SetBrakeNotch==6){
                    SetBrakeNotch=2
                    soundStop(2)
                    soundStop(3)
                    Pod:soundPlay(2,5,Lever_ABNotch)
                    Pod:soundPlay(3,10,Lever_ABEmergencyRecover)
                    Suppression = 1
                }
                
            }
            if((SetBrakeNotch==1) & (SetEqualRes<(FeedPressure-InitialReduction)) & !Lock_26L){
                SetEqualRes+= 1.5 #Triple Release Speed
                if(SetEqualRes>=(FeedPressure-InitialReduction)){
                    SetEqualRes = FeedPressure - InitialReduction
                    ABQ = 0
                    }
            }
        }elseif(!IncreaseTrainBrake & !DecreaseTrainBrake & ABQ){
            ABQ = 0
            Lock_26L = 0
        }
        if(ApplyQ&(!IncreaseTrainBrake|SetEqualRes<=FSP)){
            ApplyQ=0
            HissQ=0
            soundStop(3)
            Pod:soundPlay(3,5,AirBrakeApplyEnd)
        }
    }elseif(AirBrakeMode==1){#Simple Manual Lapping
    #0-Release
    #1-Lap
    #2-Apply
    #6-Emergency
        if(IncreaseTrainBrake & !ABQ & (SetBrakeNotch<2)){
            ABQ = 1
            SetBrakeNotch++
            soundStop(2)
            Pod:soundPlay(2,5,Lever_ABMove)
            if((SetBrakeNotch==2) & (SetEqualRes>FSP) & !HissQ){
                HissQ = 1
                Pod:soundPlay(3,10,AirBrakeApply)
                timer("EndHiss",6000)
            }
        }elseif(DecreaseTrainBrake & !ABQ & (SetBrakeNotch>0)){
            ABQ = 1
            if(SetBrakeNotch==6){
                SetBrakeNotch=2
                soundStop(2)
                Pod:soundPlay(2,10,Lever_ABEmergencyRecover)
            }else{
                SetBrakeNotch--
            }
            soundStop(2)
            Pod:soundPlay(2,5,Lever_ABMove)
            if((SetBrakeNotch==0) & (SetEqualRes<FeedPressure) & !HissQ){
                HissQ = 1
                Pod:soundPlay(3,10,AirBrakeRelease)
                timer("EndHiss",6000)
            }
        }elseif(!IncreaseTrainBrake & !DecreaseTrainBrake & ABQ){
            ABQ = 0
        }
        

        if((SetBrakeNotch==2) & (SetEqualRes>FSP)){
            SetEqualRes-=0.25
            if(SetEqualRes<FSP){SetEqualRes=FSP}
        }elseif((SetBrakeNotch==0) & (SetEqualRes<FeedPressure)){
            SetEqualRes+=0.25
            if(SetEqualRes>FeedPressure){SetEqualRes=FeedPressure}
        }
        
    }else{#Simple Self Lapping
            
    #Lol what notches?
    #0-Service Region
    #6-Emergency
        if(IncreaseTrainBrake & !ABQ){
            ABQ = 1
            soundStop(2)
            Pod:soundPlay(2,5,Lever_ABMove)
            if((SetEqualRes>FSP) & !HissQ){
                HissQ = 1
                Pod:soundPlay(3,10,AirBrakeApply)
                timer("EndHiss",6000)
            }
        }elseif(DecreaseTrainBrake & !ABQ){
            ABQ = 1
            if(SetBrakeNotch==6){
                SetBrakeNotch = 0
                soundStop(2)
                Pod:soundPlay(2,10,Lever_ABEmergencyRecover)
            }else{
                soundStop(2)
                Pod:soundPlay(2,5,Lever_ABMove)
                if((SetEqualRes<FeedPressure) & !HissQ){
                    HissQ = 1
                    Pod:soundPlay(3,10,AirBrakeRelease)
                    timer("EndHiss",6000)
                }
            }
        }elseif(!IncreaseTrainBrake & !DecreaseTrainBrake & ABQ){
            ABQ = 0
        }

            
        if(IncreaseTrainBrake & (SetEqualRes>FSP)){
            SetEqualRes-=0.25
            BleedPressure = Bleeding ? 0 : FeedPressure
            if(SetEqualRes<FSP){SetEqualRes=FSP}
        }elseif(DecreaseTrainBrake & (SetEqualRes<FeedPressure)){
            SetEqualRes+=0.25
            if(SetEqualRes>FeedPressure){SetEqualRes=FeedPressure}
        }
        
    }
    
    #Locomotive Brakes
    if(!LocoBrakeMode){ #Self Lapping
        if(IncreaseLocoBrake & (SetLocoBrakePressure<60)){
            #if(BleedPressure<72){BleedPressure=72}
            if(!LBQ){LBQ=1}
            SetLocoBrakePressure+=4
            if(SetLocoBrakePressure>60){
                SetLocoBrakePressure = 60
            }
            if(SetLocoBrakePressure==60 & !LHissQ){
                LHissQ = 1
                soundStop(2)
                Pod:soundPlay(2,10,LocoBrakeFull)
                timer("EndHiss2",500)
            }
        }elseif(DecreaseLocoBrake & (SetLocoBrakePressure>0)){
            if(!LBQ){LBQ=1}
            SetLocoBrakePressure-=2
            if(SetLocoBrakePressure<0){SetLocoBrakePressure = 0}
            if(!LHissQ){
                LHissQ = 1
                soundStop(2)
                Pod:soundPlay(2,10,(SetLocoBrakePressure>30) ? LocoBrakeReleaseHard : LocoBrakeReleaseSoft)
                timer("EndHiss2",6000)
            }
        }elseif(DecreaseLocoBrake & (SetLocoBrakePressure==0) & !LBQ){
            LBQ = 1
            SetBleeding = 1
            if((SetEqualRes<FeedPressure) & !LHissQ){
                LHissQ = 1
                soundStop(2)
                Pod:soundPlay(2,10,LocoBrakeBailoff)
                BailoffQ = 1
            }
        }elseif(!IncreaseLocoBrake & !DecreaseLocoBrake & LBQ){
            LBQ = 0
            SetBleeding = 0
        }
        
        if(BailoffQ==1&!DecreaseLocoBrake){
            LHissQ = 1
            soundStop(2)
            Pod:soundPlay(2,10,LocoBrakeBailoffEnd)
            BailoffQ = 1
        }
        
    }else{ #Manual Lapping
            
        if(IncreaseLocoBrake & !LBQ & (SetLocoBrakeNotch<2)){
            LBQ = 1
            SetLocoBrakeNotch++
            if(SetLocoBrakeNotch==2){
                soundStop(2)
                Pod:soundPlay(2,10,LocoBrakeFull)
                #BleedPressure = 72
            }
        }elseif(DecreaseLocoBrake & !LBQ & (SetLocoBrakeNotch>0)){
            LBQ = 1
            SetLocoBrakeNotch--
            if((SetLocoBrakeNotch<=0) & (SetLocoBrakePressure>0) & !LHissQ){
                LHissQ = 1
                soundStop(2)
                Pod:soundPlay(2,10,(SetLocoBrakePressure>30) ? LocoBrakeReleaseHard : LocoBrakeReleaseSoft)
                timer("EndHiss",6000)
            }
        }elseif(DecreaseLocoBrake & !LBQ & (SetLocoBrakeNotch==0)){
            LBQ = 1
            SetBleeding = 1
            if((SetLocoBrakeNotch<=0) & (SetEqualRes<FeedPressure) & !LHissQ){
                LHissQ = 1
                soundStop(2)
                Pod:soundPlay(2,10,(SetEqualRes<60) ? LocoBrakeReleaseHard : LocoBrakeReleaseSoft)
                timer("EndHiss",6000)
            }
        }elseif(!IncreaseLocoBrake & !DecreaseLocoBrake & LBQ){
            LBQ = 0
            SetBleeding = 0
            
        }
       
        if(SetBleeding & (SetLocoBrakePressure>0)){
            SetLocoBrakePressure-=4
            if(SetLocoBrakePressure<0){SetLocoBrakePressure=0}
        }elseif((SetLocoBrakeNotch==2) & (SetLocoBrakePressure<60)){
            SetLocoBrakePressure+=2
            if(SetLocoBrakePressure>60){SetLocoBrakePressure=60}
        }elseif((SetLocoBrakeNotch<=0) & (SetLocoBrakePressure>0)){
            SetLocoBrakePressure-=2
            if(SetLocoBrakePressure<0){SetLocoBrakePressure=0}
        }
        
    }
    
    #Emergency Brake
    
    if(EmergencyBrake | EmBrake){
        
        if(SetBrakeNotch<6){
            Pod:soundPlay(2,0,Lever_ABNotch)
            Pod:soundPlay(3,0,Lever_ABEmergency)
        }
        
        SetEqualRes = 0
        SetThrottle = 0
        Notch = 0
        SetDynamics = 0
        DynaNotch = 0
        SetBrakeNotch = 6
        
    }
        
    #Extra Controls
    
    #[if(HLSwitch & !ThirdPerson & PrevWeapon & HLPosition<2 & !HLQ){
        HLQ = 1
        HLPosition++
        P3b:soundPlay(7,0,HeadlightSwitch)
        P3b:p2mSetAng(P3:toWorld(ang(0,select(HLPosition+3,63,26,0,-26,-63),0)))
    }elseif(HLSwitch & !ThirdPerson & NextWeapon & HLPosition>-2 & !HLQ){
        HLQ = 1
        HLPosition--
        P3b:soundPlay(7,0,HeadlightSwitch)
        P3b:p2mSetAng(P3:toWorld(ang(0,select(HLPosition+3,63,26,0,-26,-63),0)))
    }elseif(!NextWeapon & !PrevWeapon & HLQ){
        HLQ = 0
    }
    Lights_Front = FrontHeadLight ? HeadlightSetup==1 ? select(HLPosition+3,0.4,0.4,0.4,0.7,1) : select(HLPosition+3,0.5,0.5,0.5,0.75,1) : 0
    Lights_Rear = RearHeadLight ? HeadlightSetup==1 ? select(HLPosition+3,1,0.7,0.4,0.4,0.4) : select(HLPosition+3,1,0.75,0.5,0.5,0.5) : 0
    ]#


#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    #Emergency Brake
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    if(EmergencyBrake | EmBrake){
        if(SetBrakeNotch<6){
            Pod:soundPlay(2,0,Lever_ABNotch)
            Pod:soundPlay(3,0,Lever_ABEmergency)
        }
        SetEqualRes = 0
        SetThrottle = 0
        Notch = 0
        SetDynamics = 0
        DynaNotch = 0
        SetBrakeNotch = 6
    }

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#Control Stand Plates
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#Standard AAR Plate
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
if(Plate == 1){
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#Reverser
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    Panel:setBodygroup(1,MU_Master ? 1 : 0)
    Panel:setBodygroup(2,!HasDynamics)
    Panel:setBoneAngRelative(RevBone,ang(30*SetReverser,0,0))

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#Throttle
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    Panel:setBoneAngRelative(ThrBone,ang(Dynamics ? 0 : -78.7*(Notch/8),0,0))

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#Dynamic Brakes
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    Panel:setBoneAngRelative(DynBone,ang(Dynamics ? -93*(-SetDynamics/100) : 0,0,0))

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#AAR Composite Plate
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

}elseif(Plate == 2){
    Panel:setBodygroup(1,MU_Master ? 1 : 0)
    Panel:setBodygroup(2,!TransitionMode)
    Panel:setBoneAngRelative(RevBone,ang(21*SetReverser,0,0))

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#Throttle
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    Panel:setBoneAngRelative(ThrBone,ang(Dynamics ? -78.75*(SetDynamics/100) : -78.75*(Notch/8),0,0))
    Panel:setBoneAngRelative(ThrWhlBone,ang(Dynamics ? -90*(SetDynamics/100) : -90*(Notch/8),0,0))

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#Selector Lever
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    Panel:setBoneAngRelative(SelBone,ang((KeySelUp - KeySelDn)*21,0,0))
    Panel:setBoneAngRelative(SelWhlBone,ang(Dynamics ? 11.5 : SetSelector*-11.5,0,0))

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#GE KC108 Plate
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

}elseif(Plate == 3){
    Panel:setBodygroup(1,MU_Master ? 1 : 0)
    Panel:setBodygroup(2,!TransitionMode)
    Panel:setBoneAngRelative(RevBone,ang(13*SetReverser,0,0))
    
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#Throttle
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    Panel:setBoneAngRelative(ThrBone,ang(Dynamics ? 0 : -85*(Notch/8),0,0))
    
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#Dynamic Brakes
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    Panel:setBoneAngRelative(DynBone,ang(Dynamics ? -93*(-SetDynamics/100) : 0,0,0))
}elseif(Plate==0){
    CS:setBodygroup(1,MU_Master ? 1 : 0)
    CS:setBodygroup(2,!HasDynamics)
    CS:setBoneAngRelative(RevBone,ang(30*SetReverser,0,0))
    
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#Throttle
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    CS:setBoneAngRelative(ThrBone,ang(Dynamics ? 0 : -78.7*(Notch/8),0,0))
    
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#Dynamic Brakes
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    CS:setBoneAngRelative(DynBone,ang(Dynamics ? -93*(-SetDynamics/100) : 0,0,0))}

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#Train Brake - 26C
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  
if(BrakeStand == 0){

    local TBB = 0
    switch(AirBrakeMode){
        case 4, #6SL
            TBB = select(SetBrakeNotch+1,0,25,60,75,80,110,125)
            break
        case 3, #24RL
            TBB = select(SetBrakeNotch+1,0,25,60,80,110,125)
            break
        case 2, #26L
            TBB = select(SetBrakeNotch+1,0,adc(0,FeedPressure-InitialReduction - FeedPressure*64/FeedPressure,50,FeedPressure-InitialReduction-SetEqualRes)+30,110,0,0,0,125)
            break
        case 1, #SML
            TBB = select(SetBrakeNotch+1,0,60,80,0,0,0,125)
            break
        case 0, #SSL
            TBB = select(SetBrakeNotch+1,adc(0,90,90,FeedPressure-SetEqualRes),0,0,0,0,0,125)
            break
    }

    AutoB:setBoneAngRelative(TBBone,ang(TBB,0,0))
    AutoB:setBoneAngRelative(CutSw,ang(-Cutin*90,0,0))

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#Loco Brake - 26C
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    local LBB = SetBleeding ? 0 : (SetLocoBrakePressure/72)*110
    IndB:setBoneAngRelative(LBBone,ang(0,LBB,0))
    IndB:setBoneAngRelative(LBLever,ang(0,LBB,SetBleeding ? -15 : 0))}   

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#Train Brake - CCB
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

if(BrakeStand == 1){


    local TBB = 0
    switch(AirBrakeMode){
        case 4, #6SL
            TBB = select(SetBrakeNotch+1,-10,0,55,60,90,100,105)
            break
        case 3, #24RL
            TBB = select(SetBrakeNotch+1,-10,0,55,60,100,105)
            break
        case 2, #26L
            TBB = select(SetBrakeNotch+1,-10,adc(0,FeedPressure-InitialReduction - FeedPressure*64/FeedPressure,55,FeedPressure-InitialReduction-SetEqualRes),90,0,0,0,105)
            break
        case 1, #SML
            TBB = select(SetBrakeNotch+1,-10,0,60,0,0,0,105)
            break
        case 0, #SSL
            TBB = select(SetBrakeNotch+1,adc(-10,90,90,FeedPressure-SetEqualRes),-10,90,0,0,0,105)
            break
    }


    AutoB:setBoneAngRelative(TBBone,ang(0,-TBB,0))
    AutoB:setBoneAngRelative(CutSw,ang(Cutin ? -90 : 0,0,0))

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#Loco Brake - CCB
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    local LBB = SetBleeding ? 0 : (SetLocoBrakePressure/72)*110
    AutoB:setBoneAngRelative(LBBone,ang(0,-LBB,0))
    AutoB:setBoneAngRelative(LBBone,ang(0,-LBB,SetBleeding ? 15 : 0))
}  
 
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#Train Brake - FastBrake
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

if(BrakeStand == 2){

    local TBB = 0
    switch(AirBrakeMode){
        case 4, #6SL
            TBB = select(SetBrakeNotch+1,0,15,55,60,75,80,85)
            break
        case 3, #24RL
            TBB = select(SetBrakeNotch+1,0,15,55,60,75,85)
            break
        case 2, #26L
            TBB = select(SetBrakeNotch+1,0,adc(0,FeedPressure-InitialReduction - FeedPressure*64/FeedPressure,50,FeedPressure-InitialReduction-SetEqualRes)+30,80,0,0,0,85)
            break
        case 1, #SML
            TBB = select(SetBrakeNotch+1,0,25,60,0,0,0,85)
            break
        case 0, #SSL
            TBB = select(SetBrakeNotch+1,adc(0,90,85,FeedPressure-SetEqualRes),0,25,0,0,0,85)
            break
    }

    AutoB:setBoneAngRelative(TBBone,ang(0,TBB,0))

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#Loco Brake - FastBrake
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    local LBB = SetBleeding ? 0 : (SetLocoBrakePressure/72)*110
    IndB:setBoneAngRelative(LBBone,ang(0,LBB,SetBleeding ? -7 : 0))
}

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#Train Brake - 24RL
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

if(BrakeStand == 3){

    local TBB = 0
    switch(AirBrakeMode){
        case 4, #6SL
            TBB = select(SetBrakeNotch+1,0,25,55,77,97,111,142)
            break
        case 3, #24RL
            TBB = select(SetBrakeNotch+1,0,25,55,77,97,142)
            break
        case 2, #26L
            TBB = select(SetBrakeNotch+1,0,adc(0,FeedPressure-InitialReduction - FeedPressure*64/90,70,FeedPressure-InitialReduction-SetEqualRes)+7.5,97,0,0,0,142)
            break
        case 1, #SML
            TBB = select(SetBrakeNotch+1,0,55,77,0,0,0,142)
            break
        case 0, #SSL
            TBB = select(SetBrakeNotch+1,adc(0,90,90,FeedPressure-SetEqualRes),0,25,55,77,97,142)
            break
    }

    AutoB:setBoneAngRelative(TBBone,ang(TBB,0,0))

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#Loco Brake - 24RL
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    local LBB = SetBleeding ? 0 : (SetLocoBrakePressure/72)*80
    AutoB:setBoneAngRelative(LBBone,ang(LBB,0,0))
    AutoB:setBoneAngRelative(LBLever,ang(-SetBleeding ? 15 : 0,0,0))
    AutoB:setBoneAngRelative(BailRing,ang(-SetBleeding ? 5 : 0,0,0))
    AutoB:setBonePosRelative(BailPiston,vec(0,SetBleeding ? -0.35 : 0,0))
}

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#Train Brake - 6SL
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

if(BrakeStand == 4){

    local TBB = 0
    switch(AirBrakeMode){
        case 4, #6SL
            TBB = select(SetBrakeNotch+1,0,15,41,65,80,90,108)
            break
        case 3, #24RL
            TBB = select(SetBrakeNotch+1,0,15,41,65,90,108)
            break
        case 2, #26L
            TBB = select(SetBrakeNotch+1,0,adc(0,FeedPressure-InitialReduction - FeedPressure*64/90,70,FeedPressure-InitialReduction-SetEqualRes)+7.5,90,0,0,0,108)
            break
        case 1, #SML
            TBB = select(SetBrakeNotch+1,15,41,65,0,0,0,108)
            break
        case 0, #SSL
            TBB = select(SetBrakeNotch+1,adc(0,90,90,FeedPressure-SetEqualRes),15,41,65,80,90,108)
            break
    }

    AutoB:setBoneAngRelative(TBBone,ang(TBB,0,0))
    AutoB:setBoneAngRelative(CutSw,ang(Cutin ? -90 : 0,0,0))

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#Loco Brake - 6SL
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    local LBB = SetBleeding ? 0 : (SetLocoBrakePressure/72)*120
    AutoB:setBoneAngRelative(LBBone,ang(LBB,0,0))
    AutoB:setBoneAngRelative(LBLever,ang(-SetBleeding ? 15 : 0,0,0))
}

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#Horn Actuators
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#J-hook
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    if(HornLeverType==0){
    Hjonker:setBoneAngRelative(HornBone,ang(0,0,(Quill1*5)+(Horn1*10)))    
}

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#Solednoid 1
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    if(HornLeverType==1){
    holoEntity(7):setBodygroup(1,Horn1)    
}

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#Solenoid 2
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    if(HornLeverType==2){
    holoEntity(7):setBodygroup(1,Horn1)    
}

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#Wobble Switch
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    if(HornLeverType==3){
    Hjonker:setBoneAngRelative(HornBone,ang(0,0,Horn1*15))    
}

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#Button
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    if(HornLeverType==4){
    Hjonker:setBonePosRelative(HornBone,vec(0,-Horn1*0.5,0))
}

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#MU2A Valve
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    CS:setBoneAng(MU2ASwitchBone,ang(MU2ASwitch ? 180 : 0,205,0))

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#Breaker Switches
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    CS:setBonePos(EngRunBone,vec(0,0,EngineRun ? 0.175 : -0.175))
    holoEntity(15):setSubMaterial(1,EngineRun ? EngineRunLabel_On : EngineRunLabel_Off)
    CS:setBonePos(GenFieldBone,vec(0,0,GenField ? 0.175 : -0.175))
    holoEntity(16):setSubMaterial(1,GenField ? GenFieldLabel_On : GenFieldLabel_Off)
    CS:setBonePos(FuelPumpBone,vec(0,0,FuelPump ? 0.175 : -0.175))
    holoEntity(17):setSubMaterial(1,FuelPump ? ControlLabel_On : ControlLabel_Off)

    CS:setBonePos(AuxSwitch1Bone,vec(0,0,AuxSwitch1 ? 0.175 : -0.175))
    holoEntity(18):setSubMaterial(1,AuxSwitch1 ? AuxSwitch1Label_On : AuxSwitch1Label_Off)
    CS:setBonePos(AuxSwitch2Bone,vec(0,0,AuxSwitch2 ? 0.175 : -0.175))
    holoEntity(19):setSubMaterial(1,AuxSwitch2 ? AuxSwitch2Label_On : AuxSwitch2Label_Off)
    CS:setBonePos(AuxSwitch3Bone,vec(0,0,AuxSwitch3 ? 0.175 : -0.175))
    holoEntity(20):setSubMaterial(1,AuxSwitch3 ? AuxSwitch3Label_On : AuxSwitch3Label_Off)

    CS:setBonePos(GroundLightsBone,vec(0,0,GroundLights ? 0.175 : -0.175))
    holoEntity(21):setSubMaterial(1,GroundLights ? GroundLightsLabel_On : GroundLightsLabel_Off)
    CS:setBonePos(StepLightsBone,vec(0,0,StepLights ? 0.175 : -0.175))
    holoEntity(22):setSubMaterial(1,StepLights ? StepLightsLabel_On : StepLightsLabel_Off)
    CS:setBonePos(GaugeLightsBone,vec(0,0,GaugeLights ? 0.175 : -0.175))
    holoEntity(23):setSubMaterial(1,GaugeLights ? GaugeLightsLabel_On : GaugeLightsLabel_Off)
    CS:setSubMaterial(2,GaugeLights ? "models/proppertextures/bulb_offwhite_lit" : "models/proppertextures/toolsblack")

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#Instrument Gauges
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    Gauge1:setBoneAngRelative(Red1,ang(-45-(MainRes/160)*270,0,0))
    Gauge1:setBoneAngRelative(Wht1,ang(-45-(EqualRes/160)*270,0,0))
    
    Gauge2:setBoneAngRelative(Red2,ang(-45-(Cyl/160)*270,0,0))
    Gauge2:setBoneAngRelative(Wht2,ang(-45-(BrakePipe/160)*270,0,0))

    Gauge3:setBoneAngRelative(AFM,ang(-145-(AirFlow),0,0))

    Gauge4:setBoneAngRelative(Load,ang(-(Load1/MaxLoad)*169,0,0)) 

    Gauge5:setBoneAngRelative(MPHBone,ang(120-(MPH/MaxSpeedoReading)*240,0,0))
    
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#Gauge Light Function
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

if(GaugeLights){
    holoEntity(3):setColor(vec(255,223,127))
    holoEntity(4):setColor(vec(255,223,127))
    holoEntity(5):setColor(vec(255,223,127))
    holoEntity(6):setColor(vec(255,223,127))
    lightCreate(1,Gauge1:toWorld(vec(0,0,0)),vec(250,190,100),5,3)
    lightCreate(2,Gauge2:toWorld(vec(0,0,0)),vec(250,190,100),5,3)
    lightCreate(3,Gauge3:toWorld(vec(0,0,0)),vec(250,190,100),5,3)
    lightCreate(4,Gauge4:toWorld(vec(0,0,0)),vec(250,190,100),5,3)
    lightDistance(1,1)
    lightDistance(2,1)
    lightDistance(3,1)
    lightDistance(4,1)
    lightBrightness(1,0.1)
    lightBrightness(2,0.1)
    lightBrightness(3,0.1)
    lightBrightness(4,0.1)
    lightParent(1,Gauge1)
    lightParent(2,Gauge2)
    lightParent(3,Gauge2)
    lightParent(4,Gauge2)
    CS:setSubMaterial(14,"models/proppertextures/bulb_offwhite_lit")
}
if(!GaugeLights){
    lightRemoveAll()  
    holoEntity(3):setColor(vec(200))
    holoEntity(4):setColor(vec(200))
    holoEntity(5):setColor(vec(200))
    holoEntity(6):setColor(vec(200))
    CS:setSubMaterial(14,"models/proppertextures/bulb_offwhite_unlit")
}

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    timer("clk",50)
}elseif(clk("EndHiss")){
    HissQ = 0
    LHissQ = 0
}elseif(clk("PenaltyTimeout")){
    PenaltyBrake = 0   
}

local InRelease = ((AirBrakeMode==3)|(AirBrakeMode==4)) & (SetBrakeNotch==0)
if(InRelease & !WarningHissQ){
    WarningHissQ = 1
    CS:soundPlay(3,0,WarningHiss)
}elseif(!InRelease & WarningHissQ){
    WarningHissQ = 0
    soundStop(3,0.125)
}

CtlTable["SetReverser",number] = SetReverser
CtlTable["SetThrottle",number] = SetThrottle
CtlTable["SetDynamics",number] = SetDynamics
CtlTable["SetSelector",number] = SetSelector
CtlTable["SetBrakeNotch",number] = SetBrakeNotch
CtlTable["SetEqualRes",number] = SetEqualRes
CtlTable["SetHolding",number] = (AirBrakeMode==4)&(SetBrakeNotch==2)
CtlTable["Overcharge",number] = (SetBrakeNotch==0) & ((AirBrakeMode==3)|(AirBrakeMode==4))
CtlTable["FRC",number] = FullReleaseCock
#CtlTable["SetLocoBrakeNotch",number] = SetLocoBrakeNotch
CtlTable["SetLocoBrakePressure",number] = SetLocoBrakePressure
CtlTable["SetBleeding",number] = SetBleeding
CtlTable["SetHumpMultiplier",number] = SetHumpMul
CtlTable["SetFeedPressure",number] = FeedPressure

CtlTable["EmergencyBrake",number] = EmergencyBrake
CtlTable["HandBrake",number] = HandBrake
CtlTable["Sander",number] = Sander

if(chatClk(owner())|chatClk(Pod:driver())){
    local Speaker = lastSpoke()
    local Sentence = Speaker:lastSaid():explode(" ")
    local CMD_PreNum = Sentence[1,string]
    local CMD_S = CMD_PreNum:explode(":")
    local CMD = CMD_S[1,string]
    local NumberGiven = CMD_S[2,string]
    local Num = Number:trim()
    
    local OnRun = 1#(On1 & Run)|(On2 & Run_DPM)
    
    
    if((NumberGiven==Num) | NumberGiven==""){
        switch(CMD){
            case ".controls",
                if(MU_Master){
                    for(K=1,ControlPrintOrder:count()){
                        local ControlName = ControlPrintOrder[K,string]
                        local X = Controls[ControlName,string]
                        if(Routing[ControlName,number]){
                            printProper(ControlName + ": Shift + " + X)
                        }else{
                            printProper(ControlName + ": " + X)
                        }
                    }
                }
                hideChat(1)
                break
            case ".reverser",
                if(MU_Master & OnRun){
                    if(Dynamics){
                        printProper("[RLCPT] Dynamic Brakes are On!")
                    }elseif(SetThrottle>0){
                        printProper("[RLCPT] Throttle is On!")
                    }else{
                        SetReverser = sign(Sentence[2,string]:toNumber())
                        printProper("[RLCPT] Reverser set to " + SetReverser:toString() + ".")
                    }
                }
                hideChat(1)
                break
            case ".throttle",
                if(MU_Master & OnRun){
                    if(Dynamics){
                        printProper("[RLCPT] Dynamic Brakes are On!")
                    }elseif(HEP_Notch==1){
                        printProper("[RLCPT] HEP Mode is in Standby!")
                    }else{
                        if(NotchedThrottle){
                            SetThrottle = clamp(dac(0,100,NumThrottleNotches,adc(0,100,NumThrottleNotches,Sentence[2,string]:toNumber())),0,100)
                            Notch = adc(0,100,NumThrottleNotches,SetThrottle)
                        }else{
                            SetThrottle = clamp(Sentence[2,string]:toNumber(),0,100)
                            Notch = adc(0,100,NumThrottleNotches,SetThrottle)
                        }
                        printProper("[RLCPT] Throttle set to " + SetThrottle + "%.")
                    }
                }
                hideChat(1)
                break
            case ".notch",
                if(MU_Master & OnRun){
                    if(Dynamics){
                        printProper("[RLCPT] Dynamic Brakes are On!")
                    }elseif(HEP_Notch==1){
                        printProper("[RLCPT] HEP Mode is in Standby!")
                    }else{
                        if(NotchedThrottle){
                            Notch = clamp(round(Sentence[2,string]:toNumber()),0,NumThrottleNotches)
                            SetThrottle = dac(0,100,NumThrottleNotches,Notch)
                            printProper("[RLCPT] Throttle set to Notch " + Notch + ".")
                            
                        }else{
                            printProper("[RLCPT] Throttle has no Notches!")
                        }
                        
                    }
                }
                hideChat(1)
                break
            case ".dynamics",
                if(MU_Master & OnRun){
                    if(!HasDynamics){
                        printProper("[RLCPT] Dynamic Brakes are not Enabled!")
                    }elseif(!abs(SetReverser)){
                        printProper("[RLCPT] Reverser is not Engaged!")
                    }elseif(SetThrottle>0){
                        printProper("[RLCPT] Throttle is not in Idle!")
                    }else{
                        local Set = clamp(Sentence[2,string]:toNumber(),0,100)
                        SetDynamics = (Set<10) ? 0 : Set
                        DynaNotch = (SetDynamics==0) ? -1 : adc(10,100,NumThrottleNotches,SetDynamics)
                        
                        #Dynamics = DynamicBrakingPower>0
                        
                        printProper("[RLCPT] Dynamic Brake set to " + SetDynamics + "%.")
                    }
                }
                hideChat(1)
                break
            case ".dynanotch",
                if(MU_Master & OnRun){
                    if(NotchedDynamics){
                        if(!HasDynamics){
                            printProper("[RLCPT] Dynamic Brakes are not Enabled!")
                        }elseif(!abs(SetReverser)){
                            printProper("[RLCPT] Reverser is not Engaged!")
                        }elseif(SetThrottle>0){
                            printProper("[RLCPT] Throttle is not in Idle!")
                        }else{
                            local Set = clamp(round(Sentence[2,string]:toNumber()),-1,NumThrottleNotches)
                            DynaNotch = Set
                            SetDynamics = (Set==-1) ? 0 : dac(10,100,NumThrottleNotches,DynaNotch)
                            
                            #Dynamics = DynamicBrakingPower>0
                            
                            printProper("[RLCPT] Dynamic Brake set to Notch " + DynaNotch + " (" + SetDynamics + "%).")
                        }
                    }else{
                        printProper("[RLCPT] Dynamic Brakes are not Notched!")
                    }
                }
                hideChat(1)
                break
            case ".abset",
                if(MU_Master & OnRun){
                    local What = Sentence[2,string]
                    if(What==""){
                        SetEqualRes = 0
                    				SetThrottle = 0
                    				Notch = 0
                    				SetDynamics = 0
                    				SetBrakeNotch = 6
                        printProper("[RLCPT] Setting Emergency Brake application!")
                    }else{
                        local Set = clamp(What:toNumber(),0,FeedPressure*64/90)
                        switch(AirBrakeMode){
                            case 4, #6SL
                                if(Set==0){
                                    SetEqualRes = FeedPressure
                                    SetBrakeNotch = 1
                                }else{
                                    SetEqualRes = FeedPressure - Set
                                    SetBrakeNotch = 3
                                }
                                break
                            case 3, #24RL
                                if(Set==0){
                                    SetEqualRes = FeedPressure
                                    SetBrakeNotch = 1
                                }elseif(Set<InitialReduction){
                                    SetEqualRes = FeedPressure - InitialReduction
                                    SetBrakeNotch = 2
                                }else{
                                    SetEqualRes = FeedPressure - Set
                                    SetBrakeNotch = 3
                                }
                                break
                            case 2, #26L
                                if(Set==0){
                                    SetEqualRes = FeedPressure
                                    SetBrakeNotch = 0
                                }elseif(Set<InitialReduction){
                                    SetEqualRes = FeedPressure - InitialReduction
                                    SetBrakeNotch = 1
                                }else{
                                    SetEqualRes = FeedPressure - Set
                                    SetBrakeNotch = 1
                                }
                                break
                            case 1, #SML
                                SetBrakeNotch = 1
                                SetEqualRes = FeedPressure - Set
                                break
                            case 0, #SSL
                                SetBrakeNotch = 0
                                SetEqualRes = FeedPressure - Set
                                break
                        }
                        printProper("[RLCPT] Setting " + (FeedPressure-SetEqualRes) + "lb application on train.")
                    }
                }
                hideChat(1)
                break
			case ".brake",
				if(MU_Master & OnRun){
        SetEqualRes = 0
        SetThrottle = 0
        Notch = 0
        SetDynamics = 0
        SetBrakeNotch = 6
        printProper("[RLCPT] Setting Emergency Brake application!")
				}
				hideChat(1)
				break
            case ".lbset",
                local Set = clamp(Sentence[2,string]:toNumber(),0,72)
                local ML = (AirBrakeMode==1)|(AirBrakeMode==3)|(AirBrakeMode==4)
                SetLocoBrakePressure = Set
                if(ML){SetLocoBrakeNotch=1}
                printProper("[RLCPT] Setting " + (SetLocoBrakePressure) + "lb application on locomotive(s).")
                
                hideChat(1)
                break
            case ".remotemode",
                if(MU_Master){
                    RemoteMode = sign(Sentence[2,string]:toNumber())
                    printProper("[RLCPT] Remote Control Mode set to " + RemoteMode + ".")
                    hideChat(1)
                }
                break
            case ".feedvalve",
                if(Sentence[2,string]==""){
                    print("[RLCPT] Your Feed Valve is currently set to "+FeedPressure+" PSI.")
                }else{
                    FeedPressure = clamp(Sentence[2,string]:toNumber(),70,120)
                    print("[RLCPT] Your Feed Valve is now set to "+FeedPressure+" PSI.")
                }
                hideChat(1)
                break
            case ".fullreleasecock",
                if(AirBrakeMode==3){
                    if(Sentence[2,string]==""){
                        FullReleaseCock = 0
                    }else{
                        FullReleaseCock = Sentence[2,string]:toNumber()
                    }
                    print("[RLCPT] Your Full Release Cock is now set to " + (FullReleaseCock ? "MR (1)." : "FV (0)."))
                }else{
                    print("[RLCPT] You don't have a Full Release Cock!")
                }
                
                hideChat(1)
                break
            default,
                if(CMD:index(1)=="."){
                    local CMDL = CMD:lower()
                    if("abcdefghijklmnopqrstuvwxyz":find(CMDL:index(2))){
                        hideChat(1)
                    }
                }
                break
        }
    }
    
}

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#Broken stuff
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#[
if(LightToggle & ~LightToggle){
    Light = !Light
    CS:soundPlay(0,1,"buttons/lightswitch2.wav")
}
if(BellToggle & ~BellToggle){
    Bell = !Bell
    CS:soundPlay(0,1,Bell ? "rlc_delta/cstands/bell_on.wav" : "rlc_delta/cstands/bell_off.wav")
}
if(MiscToggle & ~MiscToggle){
    Misc = !Misc
}
]#

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
