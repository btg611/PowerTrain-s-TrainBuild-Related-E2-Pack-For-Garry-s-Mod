@name ptgamma/cstands_holo/cstand_fm_mid_6sl_l_nc_sat PowerTrain's Edit
@inputs MU_Master Pod:entity ControlStand:wirelink Number:string Horn1 Quill1 Horn2 Quill2 ForceSand BrakeCutIn EmBrake BellToggle 
@inputs LightToggleF LightToggleR MiscToggle HEP_Notch Active RemoteControl UsingRearSeat HumpMultiplier
@inputs On1 Primed1 MainRes Cyl Load1 BrakePipe EqualRes GenCurrent EngineSpeed1 Temperature 
@inputs HighPower LowPower ClassLightsF StepLights ClassLightsR CabLights FuelPump HoodLights
@inputs FrontHeadLightDim RearHeadLightDim FrontHeadLightMed RearHeadLightMed FrontHeadLightBrt RearHeadLightBrt
@inputs EngineStart EngineStop Isolation GroundReset LowOil WheelSlip EngineProtect Ground BlowerFailure
@outputs CtlTable:table Bell LightF LightR Misc CONSTANT RemoteMode SelectorUp SelectorDown IncreaseDynamics DecreaseDynamics HeldLength 
@outputs SetBrakeNotch SetLocoBrakeNotch SetBleeding LightFBrightness LightRBrightness
@persist NotchedThrottle NumThrottleNotches HasDynamics NotchedDynamics TransitionMode TransitionControlType AirBrakeMode LocoBrakeMode InitialReduction Lock_26L Bleeding CTL_Version:string
@persist [Lever_Throttle Lever_ThrottleNotchDetent Lever_ThrottleEndClunk Lever_ThrottleEndSoftClunk Lever_ReverserF Lever_ReverserN Lever_ReverserB AirReverser_Center AirReverser_Set]:string 
@persist [Lever_24RL Lever_26L AirBrakeApply AirBrakeRelease AirBrakeDump LocoBrakeFull LocoBrakeReleaseHard LocoBrakeReleaseSoft WarningHiss]:string
@persist NQ Notch DNQ DynaNotch Dynamics SelectorQ RevQ ABQ HissQ LBQ LHissQ
@persist ControlPrintOrder:array DriverQ Routing:table DriverOld:entity Controls:table Shift:string
@persist ReverserF ReverserB IncreaseThrottle DecreaseThrottle IncreaseDynamics DecreaseDynamics KeyDynUp KeyDynDn IncreaseTrainBrake DecreaseTrainBrake IncreaseLocoBrake DecreaseLocoBrake SelectorUp SelectorDown
@persist HandBrake EmergencyBrake Sander
@persist SetReverser SetThrottle SetDynamics SetSelector SetBrakeNotch SetEqualRes SetLocoBrakeNotch SetLocoBrakePressure SetBleeding FeedPressure FullReleaseCock WarningHissQ
@persist HornType C1P:vector C1A:angle CordAnchor1:vector CordAnchor2:vector CordExtendLength DongleHeight PullLength DownRatio
@persist CS:entity LeverBased
@persist Thetas:table LocoBrakePitch
@trigger 
if(duped()){
    reset()
}
if(first()){
    #FOR USE WITH RLC PT 2.0.66 OR OTHER COMPATIBLE VERSIONS
    CtlTable["CS_Version",string] = "2.0.66"
    
    #General Setup Instructions:
    #You will need one of these with RLC PT2. Spawn it somewhere and get wiring! See the RLC PT2 Operator's Manual for more instructions.
    #Don't neglect to check the config!
    #The "HEP_Notch" input is only necessary if the locomotive has HEP.
    #The "Active" and "RemoteControl" inputs are only necessary if the locomotive is equipped with Remote Control capability; "Active" goes to the Pod Controller, "RemoteControl" to a separate toggled button.
    #The "UsingRearSeat" input  is only necessary if the locomotive features Dual Cabs or Dual Control Stands.
    
    
    #Config
    
    #Pick a Control Scheme File! You can find them in "ptgamma/controls/" !
    #include "ptgamma/controls/MSTS"
    
    LocoBrakeMode = 0 #0 for Self Lapping, 1 for Manual Lapping
    
    InitialReduction = 6 #If using 24RL or 26L brake modes, the train brake will automatically drop this much pressure in First Service or Initial Reduction positions.
    FeedPressure = 90 #Feed Valve pressure in PSI. 70 was the standard until the 1950s, 90 is the standard for freight. 110 is the passenger standard, 120 is sometimes used by mountain railroads.
    
    CordExtendLength = 4 #How far from anchor point is the horn valve at the top?
    DongleHeight = 0.125 #Fraction of total cord length to place Dongle at
    PullLength = 1 #How many units to pull the cord towards you?
    DownRatio = 0.5 #Pull the dongle (PullLength x DownRatio) units down as well
    
    #Sounds (Don't touch unless you know what you're doing!)
    
    Lever_Throttle = "priority's sounds/griggs/controlstands/airthrottle/airthrottle_downloop.wav"
    Lever_ThrottleNotchDetent = "priority's sounds/griggs/controlstands/airthrottle/airthrottle_uphiss_1.wav"
    Lever_ThrottleEndClunk = "priority's sounds/griggs/controlstands/airthrottle/airthrottle_uphiss_4.wav"
    Lever_ThrottleEndSoftClunk = "priority's sounds/griggs/controlstands/airthrottle/airthrottle_uphiss_4.wav"
    
    AirReverser_Center = "priority's sounds/griggs/controlstands/airthrottle/airthrottle_toidlehiss_1.wav"
    AirReverser_Set = "priority's sounds/griggs/controlstands/airthrottle/airthrottle_toidlehiss_2.wav"
    
    Lever_ReverserF = "priority's sounds/griggs/controlstands/airthrottle/airthrottle_uphiss_2.wav"
    Lever_ReverserN = "priority's sounds/griggs/controlstands/airthrottle/airthrottle_toidlehiss_3.wav"
    Lever_ReverserB = "priority's sounds/griggs/controlstands/airthrottle/airthrottle_uphiss_3.wav"
    
    Lever_24RL = "gsgtrainsounds/misc/airbrakes/air_16m_move.wav"
    Lever_26L = "gsgtrainsounds/misc/airbrakes/air_26l_move.wav"
    
    AirBrakeApply = "trans_train_sounds/air/6sl_service.wav"
    AirBrakeRelease = "trans_train_sounds/air/6sl_release.wav"
    AirBrakeDump = "trans_train_sounds/air/dump.wav"
    
    LocoBrakeFull = "gsgtrainsounds/misc/airbrakes/air_ind_full.wav"
    LocoBrakeReleaseSoft = "trans_train_sounds/air/indy_release_soft.wav"
    LocoBrakeReleaseHard = "trans_train_sounds/air/indy_release.wav"
    
    WarningHiss = "gsgtrainsounds/misc/desktop/horn_air_loop.wav"
    
    # Settings you shouldn't touch because this particular stand has absolutely no support for anything else
    
    AirBrakeMode = 4 #Literally only No.6 (Option 4) brake systems work with this stand
    HornType = 1
    NotchedThrottle = 0
    NumThrottleNotches = 8
    HasDynamics = 0
    NotchedDynamics = 0
    TransitionMode = 1
    TransitionControlType = 2 #0 This has no selector. Air throttle don't give a fu
    
    function vector linpos(V1:vector, V2:vector, P){
        return V1 + P*(V2-V1)
    }
    
    function normal adc(MinVal, MaxVal, Resolution, Input){
        local Output = 0
        if(inrange(Input,MinVal,MaxVal)){
            Output = round(Resolution*((Input - MinVal)/(MaxVal-MinVal)))
            
        }elseif(Input < MinVal){
            Output = 0
        }elseif(Input > MaxVal){
            Output = Resolution
        }
        
        return Output
    }
    
    function normal dac(MinVal, MaxVal, Resolution, Input){
        local Output = 0
        if(inrange(Input,0,Resolution)){
            Input = round(Input)
            Output = (MaxVal - MinVal)*(Input/Resolution) + MinVal
        }elseif(Input < 0){
            Output = MinVal
        }elseif(Input > Resolution){
            Output = MaxVal
        }
        return Output
    }
    
    function void entity:printProper(Message:string){
        if(This==owner()){
            print(Message)
        }else{
            Pod:printDriver(Message)
        }
    }
    
    function void lever(HoloIndex,Angle,Speed){
        local Current = Thetas[HoloIndex,number]
        if(Current>Angle){
            Current -= Speed
            if(Current<Angle){Current = Angle}
            Thetas[HoloIndex,number] = Current
            holoAng(HoloIndex,CS:toWorld(ang(0,Current,0)))
        }elseif(Current<Angle){
            Current += Speed
            if(Current>Angle){Current = Angle}
            Thetas[HoloIndex,number] = Current
            holoAng(HoloIndex,CS:toWorld(ang(0,Current,0)))
        }
    }
    
    function void lever2(HoloIndex,Angle,Speed){ #Used for Brake Cutout
        local Current = Thetas[HoloIndex,number]
        if(Current>Angle){
            Current -= Speed
            if(Current<Angle){Current = Angle}
            Thetas[HoloIndex,number] = Current
            holoAng(HoloIndex,CS:toWorld(ang(Current,0,-90)))
        }elseif(Current<Angle){
            Current += Speed
            if(Current>Angle){Current = Angle}
            Thetas[HoloIndex,number] = Current
            holoAng(HoloIndex,CS:toWorld(ang(Current,0,-90)))
        }
    }
    
    function void lever(HoloIndex,Angle,Pitch,Speed){ #Formerly used for loco brake, rewritten for the toaster lever
        local Current = Thetas[HoloIndex,number] #Yaw
        local CurrentPitch = Thetas[4,number] #Pitch
        local NeedAdjust = 0
        if(Current>Angle){
            Current -= Speed
            if(Current<Angle){Current = Angle}
            Thetas[5,number] = Current
            NeedAdjust = 1
        }elseif(Current<Angle){
            Current += Speed
            if(Current>Angle){Current = Angle}
            Thetas[5,number] = Current
            NeedAdjust = 1
        }
        if(CurrentPitch>Pitch){
            CurrentPitch -= Speed
            if(CurrentPitch<Pitch){CurrentPitch = Pitch}
            Thetas[4,number] = CurrentPitch
            NeedAdjust = 1
        }elseif(CurrentPitch<Pitch){
            CurrentPitch += Speed
            if(CurrentPitch>Pitch){CurrentPitch = Pitch}
            Thetas[4,number] = CurrentPitch
            NeedAdjust = 1
        }
        if(NeedAdjust){
            holoAng(5,CS:toWorld(ang(CurrentPitch,Current,0)))
            # funky ass position adjustment
            local XAdjustPitch = (CurrentPitch*sign(CurrentPitch)/40)
            local XAdjustYaw = (Current-6.5)/100
            holoPos(5,CS:toWorld(vec(9-XAdjustPitch-XAdjustYaw,12.5,4.05-(CurrentPitch/5.25))))
        }
    }
    
    ControlPrintOrder = array(
        "ReverserF",
        "ReverserB",
        "IncreaseThrottle",
        "DecreaseThrottle",
        "IncreaseDynamics",
        "DecreaseDynamics",
        "SelectorUp",
        "SelectorDown",
        "IncreaseTrainBrake",
        "DecreaseTrainBrake",
        "IncreaseLocoBrake",
        "DecreaseLocoBrake",
        "EmergencyBrake",
        "HandBrake",
        "Sander",
        "UseButtons"
    )
    
    #Controls Init
    foreach(K,V:string = Controls){
        if(V:find(" +Shift")){
            Routing[K,number] = 1
            local EXP = V:explode(" ")
            Controls[K,string] = EXP[1,string]
        }else{
            Routing[K,number] = 0
        }
    }
    
    
    CtlTable["AirBrakeMode",number] = AirBrakeMode
    CtlTable["InitialReduction",number] = InitialReduction
    CtlTable["NotchedThrottle",number] = NotchedThrottle
    CtlTable["NumThrottleNotches",number] = NumThrottleNotches
    CtlTable["NotchedDynamics",number] = NotchedDynamics
    CtlTable["TransitionMode",number] = TransitionMode
    CtlTable["TransitionControlType",number] = TransitionControlType
    
    if(AirBrakeMode==2){#26L
        SetBrakeNotch = 2
    }elseif(AirBrakeMode>=3){#24RL/6SL
        SetBrakeNotch = 4 
        #print("Yarg")   
    }elseif(AirBrakeMode==1){#Simple ML
        SetBrakeNotch = 2
    }else{ #Simple SL
        SetBrakeNotch = 0
    }
    LocoBrakeNotch = 0
    
    CONSTANT = 1
    
    
    #Control Stand Init
    CS = ControlStand:entity()
    
    #Reverser/Throttle Toaster Gearshift thing
    holoCreate(4,CS:toWorld(vec(-8.5,12.5,4.05)),vec(1),CS:angles(),vec(255),"models/monkatraztrainprops/parts/stand_fm_mid_6sl-l-nc-sat_handles.mdl")
    Thetas[4,number] = 0
    #Throttle NOPE REVERSER ROTATION POINT HAHAHAHAHAHAHA
    holoCreate(5,CS:toWorld(vec(9,12.5,4.05)),vec(1),CS:angles(),vec(255),"cube")
    holoAlpha(5,0)
    Thetas[5,number] = 0
    #Selector
        #holoCreate(6,CS:toWorld(vec(-0.08,15.5,-0.1)),vec(1),CS:angles(),vec(255),"models/monkatraztrainprops/parts/stand_fm_mid_6sl-xm781_handles.mdl")
        #holoBodygroup(6,0,1)
        #Thetas[6,number] = 0
    #Auto Brake
    holoCreate(7,CS:toWorld(vec(3.61,29.72,14.21)),vec(1),CS:toWorld(ang(0,21,0)),vec(255),"models/monkatraztrainprops/parts/stand_fm_mid_6sl-xm781_handles.mdl")
    holoBodygroup(7,0,3)
    Thetas[7,number] = 21
    #Loco Brake
    holoCreate(8,CS:toWorld(vec(-3.08,29.83,7.53)),vec(1),CS:toWorld(ang(0,-45,0)),vec(255),"models/monkatraztrainprops/parts/stand_fm_mid_6sl-xm781_handles.mdl")
    holoBodygroup(8,0,4)
    Thetas[8,number] = -45
    #Notch Wheel
        #holoCreate(9,CS:toWorld(vec(-0.32,-7.92,41.89)),vec(1),CS:toWorld(ang(0,67.5,0)),vec(255),"models/monkatraztrainprops/parts/stand_fm_mid_6sl-xm781_handles.mdl")
        #Thetas[9,number] = 67.5
    #Selector Wheel
        #holoCreate(10,CS:toWorld(vec(0.1,-5.9,41.89)),vec(1),CS:toWorld(ang(0,140,0)),vec(255),"models/monkatraztrainprops/parts/stand_fm_mid_6sl-xm781_handles.mdl")
        #Thetas[10,number] = 140
    #Bell Valve
    holoCreate(11,CS:toWorld(vec(0.87,25.36,9.91)),vec(1),CS:angles(),vec(255),"models/monkatraztrainprops/parts/stand_fm_mid_6sl-xm781_handles.mdl")
    holoBodygroup(11,0,6)
    Thetas[11,number] = 0
    #Sander Valve
    holoCreate(12,CS:toWorld(vec(0.87,34.06,9.91)),vec(1),CS:angles(),vec(255),"models/monkatraztrainprops/parts/stand_fm_mid_6sl-xm781_handles.mdl")
    holoBodygroup(12,0,6)
    Thetas[12,number] = 0
    #Brake Cut-Out
    holoCreate(13,CS:toWorld(vec(9.4,25.375,3.25)),vec(1),CS:toWorld(ang(180,0,-90)),vec(255),"models/monkatraztrainprops/parts/stand_fm_mid_6sl-xm781_handles.mdl")
    holoBodygroup(13,0,7)
    Thetas[13,number] = 180
    #Buttons
    holoCreate(14,CS:toWorld(vec(0,0,0)),vec(1),CS:toWorld(ang(0,90,0)),vec(255),"models/zexciv_train_stuff/usa/details/fm_stand_details_buttons.mdl")
    holoParent(14,CS)
    #Gauges
    holoCreate(15,CS:toWorld(vec(0,0,0)),vec(1),CS:toWorld(ang(0,90,0)),vec(255),"models/zexciv_train_stuff/usa/details/fm_stand_details_gauges.mdl")
    holoEntity(15):setSubMaterial(2,"models/gsgtrainprops/cab/gauge_battery_generic_1")
    holoEntity(15):setSubMaterial(3,"models/gsgtrainprops/cab/gauge_lima_intake_manifold")
    holoEntity(15):setSubMaterial(8,"models/gsgtrainprops/cab/gauge_amp_lima_a2000_v1")
    holoParent(15,CS)
    #holoBodygroup(15,6,1)
    #holoBodygroup(15,8,1)   



    
    holoParent(4,5)
    holoParent(5,CS)
    for(N=7,8){
        holoParent(N,CS)
    }
    for(N=11,13){
        holoParent(N,CS)
    }

    #Horn Cord Mounting Position and Angle
    C1P = vec(1.51,18.3,17.3)
    C1A = ang(0,150,0)
    
    if(HornType){
        if(1){
            local Hpos1 = CS:toWorld(C1P)
            local Hang1 = CS:toWorld(C1A)
            rangerFilter(CS)
            local Hpos2 = rangerOffset(128,Hpos1 + CordExtendLength*Hang1:forward(), Hang1:up()):pos() 
            CordAnchor1 = CS:toLocal(Hpos2)
            local Hpos3 = linpos(Hpos1,Hpos2,DongleHeight) + (CordExtendLength/4)*Hang1:forward()
            #local Haxis1 = (Hpos2-Hpos1)
            local Length1 = Hpos1:distance(Hpos3)
            local Ang1 = -heading(Hpos1,ang(),Hpos3)
            local Ang1a = Ang1:rotateAroundAxis(Ang1:right(),-90)
            
            local Length2 = Hpos2:distance(Hpos3)
            local Ang2 = -heading(Hpos3,ang(),Hpos2)
            local Ang2a = Ang2:rotateAroundAxis(Ang2:right(),-90)
            
            holoCreate(1,linpos(Hpos1,Hpos3,0.5),vec(0.125,0.125,(Length1/60)),Ang1a,vec(255,225,127),"models/sprops/cylinders/size_1/cylinder_1_5x60.mdl")
            holoCreate(2,linpos(Hpos2,Hpos3,0.5),vec(0.125,0.125,(Length2/60)),Ang2a,vec(255,225,127),"models/sprops/cylinders/size_1/cylinder_1_5x60.mdl")
            holoCreate(3,Hpos3 + 1*Ang2a:up(),vec(0.125,0.125,0.25),Ang2a,vec(255),"models/sprops/misc/fittings/cred_12_9_tall.mdl")
            holoParent(1,CS)
            holoParent(2,CS)
            holoParent(3,CS)
            holoMaterial(1,"models/debug/debugwhite")
            holoMaterial(2,"models/debug/debugwhite")
            holoMaterial(3,"sprops/textures/sprops_wood2")
            
            #C1P = CS:toLocal(Hpos1)
            #C1A = CS:toLocal(Hang1)
        }
        #CS:setBodygroup(6,3)
    
    }
    
    # sound fuas
    HeldLength = 1
    if(MU_Master & NotchedThrottle == 0){
        Pod:soundPlay(5,0,Lever_Throttle)
        soundVolume(5,0)
        soundPitch(5,100)
    }
    
    CtlTable["CTL_Version",string] = CTL_Version
    setName("RLC PT2 Control Stand ("+CtlTable["CS_Version",string]+")\nFM Stand with Air Throttle\n"+select(AirBrakeMode+1,"Simple SL","Simple ML","26-L","24-RL","No.6")+" with "+(LocoBrakeMode ? "ML" : "SL")+" Independents")
    runOnChat(1)
    timer("clk",100)

}
Buttons=holoEntity(14)
Gauges=holoEntity(15)

MRNeedle = Gauges:boneIndex("needle1a")
ERNeedle = Gauges:boneIndex("needle1")

LoadNeedle= Gauges:boneIndex("needle2")

CylNeedle = Gauges:boneIndex("needle3a")
BPNeedle = Gauges:boneIndex("needle3")

BattAmpsNeedle = Gauges:boneIndex("needle4")

TempNeedle = Gauges:boneIndex("needle5")

ManifoldPSINeedle = Gauges:boneIndex("needle6")

OilPSINeedle = Gauges:boneIndex("needle7")

if(Temperature>=70){
HotEngine=1
}else{
HotEngine=0
}

#if(BatteryPower){
Buttons:setSubMaterial(2,WheelSlip ? "models/proppertextures/bulb_offwhite_lit" : "models/proppertextures/bulb_offwhite_unlit")
Buttons:setSubMaterial(4,Primed1 ? "models/proppertextures/bulb_orange_unlit" : "models/proppertextures/bulb_orange_lit")
#[Buttons:setSubMaterial(5,HotEngine ? "models/proppertextures/bulb_orange_unlit" : "models/proppertextures/bulb_orange_lit")
if(HotEngine==1){
Buttons:setSubMaterial(5,"models/proppertextures/bulb_red_lit")}
elseif(HotEngine==1){
Buttons:setSubMaterial(5,"models/proppertextures/bulb_red_unlit")}
]#
#}
#[Buttons:setBodygroup(20,!Primed1)
Buttons:setBodygroup(21,WheelSlip)
Buttons:setBodygroup(22,EngineProtect)
Buttons:setBodygroup(23,HotEngine)
Buttons:setBodygroup(24,Ground)
Buttons:setBodygroup(25,BlowerFailure)]#
if(MU_Master){
    
    if(~MU_Master & NotchedThrottle == 0){
        Pod:soundPlay(5,0,Lever_Throttle)
        soundVolume(5,0)
        soundPitch(5,100)
    }
            
    #MASTER MODE
    local Driver = noentity()
    local PodDriver = Pod:driver()
    if(RemoteControl | RemoteMode){
        if(Active & !PodDriver){
            Driver = owner()
        }
    }else{
        Driver = Pod:driver()
    }
    if(Driver & !DriverQ){
        DriverQ = 1
        runOnKeys(Driver,1)
    }elseif(!Driver & DriverQ){
        DriverQ = 0
        runOnKeys(DriverOld,0)
    }
    DriverOld = Driver
    
    if(keyClk(Driver)){
        local Shifting = Driver:keyPressed(Shift)
        
        UseButton = Driver:keyPressed(Controls["UseButton",string]) & (Routing["UseButton",number] ? Shifting : !Shifting)
        
        if(!UseButton){
        
            local RF = UsingRearSeat ? "ReverserB" : "ReverserF"
            local RB = UsingRearSeat ? "ReverserF" : "ReverserB"
            
            ReverserF = Driver:keyPressed(Controls[RF,string]) & (Routing[RF,number] ? Shifting : !Shifting)
            ReverserB = Driver:keyPressed(Controls[RB,string]) & (Routing[RB,number] ? Shifting : !Shifting)
            
            IncreaseThrottle = Driver:keyPressed(Controls["IncreaseThrottle",string]) & (Routing["IncreaseThrottle",number] ? Shifting : !Shifting)
            DecreaseThrottle = Driver:keyPressed(Controls["DecreaseThrottle",string]) & (Routing["DecreaseThrottle",number] ? Shifting : !Shifting)
            
            IncreaseTrainBrake = Driver:keyPressed(Controls["IncreaseTrainBrake",string]) & (Routing["IncreaseTrainBrake",number] ? Shifting : !Shifting)
            DecreaseTrainBrake = Driver:keyPressed(Controls["DecreaseTrainBrake",string]) & (Routing["DecreaseTrainBrake",number] ? Shifting : !Shifting)
            
            IncreaseLocoBrake = Driver:keyPressed(Controls["IncreaseLocoBrake",string]) & (Routing["IncreaseLocoBrake",number] ? Shifting : !Shifting)
            DecreaseLocoBrake = Driver:keyPressed(Controls["DecreaseLocoBrake",string]) & (Routing["DecreaseLocoBrake",number] ? Shifting : !Shifting)
            
            KeyDynUp = Driver:keyPressed(Controls["IncreaseDynamics",string]) & (Routing["IncreaseDynamics",number] ? Shifting : !Shifting)
            KeyDynDn = Driver:keyPressed(Controls["DecreaseDynamics",string]) & (Routing["DecreaseDynamics",number] ? Shifting : !Shifting)
            
            IncreaseDynamics = 0
            DecreaseDynamics = 0
            
            EmergencyBrake = Driver:keyPressed(Controls["EmergencyBrake",string]) & (Routing["EmergencyBrake",number] ? Shifting : !Shifting)
            
            HandBrake = Driver:keyPressed(Controls["HandBrake",string]) & (Routing["HandBrake",number] ? Shifting : !Shifting)
            Sander = Driver:keyPressed(Controls["Sander",string]) & (Routing["Sander",number] ? Shifting : !Shifting)
            
            SelectorUp = Driver:keyPressed(Controls["SelectorUp",string]) & (Routing["SelectorUp",number] ? Shifting : !Shifting)
            SelectorDown = Driver:keyPressed(Controls["SelectorDown",string]) & (Routing["SelectorDown",number] ? Shifting : !Shifting)
            
        }
    }
}else{
    if(DriverQ){
        DriverQ = 0
        runOnKeys(owner(),0)
    }
    soundStop(1)
}
if(clk("clk")){
    local Tick = 1
    Dynamics = SetDynamics>0
    
    
    #Lever-Based Controlling - This part is different for every control stand!
    if(LeverBased){
        #Initial Control Resets
        
        #Selector/Dynamics Interlock
        if(!SelectorQ & !DNQ){
            if((SetSelector>=0) & !Dynamics & SelectorDown){
                SelectorUp = 1
                SelectorDown = 0
            }elseif((SetSelector>0) & !Dynamics & SelectorUp){
                SelectorUp = 0
                SelectorDown = 1
            }elseif((SetSelector==0) & !Dynamics & SelectorUp){
                SelectorUp = 0
                IncreaseDynamics = 1
            }elseif(Dynamics & (SetDynamics==10) & SelectorDown){
                SelectorDown = 0
                DecreaseDynamics = 1
            }elseif(Dynamics & (SetDynamics>=10) & SelectorUp){
                SelectorUp = 0
                IncreaseDynamics = 1
            }elseif(Dynamics & (SetDynamics>10) & SelectorDown){
                SelectorDown = 0
                DecreaseDynamics = 1
            }
        }
    }else{
        IncreaseDynamics = KeyDynUp
        DecreaseDynamics = KeyDynDn
    }
    
    #Throttle
    if(!Dynamics){
        if(NotchedThrottle){
            # NO
        }else{
            local OldSetThrottle = SetThrottle
            SetThrottle += (IncreaseThrottle*(abs(SetReverser)==1) - DecreaseThrottle)*HeldLength
            HeldLength = IncreaseThrottle | DecreaseThrottle ? clamp(HeldLength+0.5,1,10) : 1
            SetThrottle = clamp(SetThrottle,0,100)
            local Diff = abs(OldSetThrottle - SetThrottle)
            # snap to notch 1
            if(IncreaseThrottle & SetReverser != 0 & SetThrottle < 12.5 & SetThrottle != 12.5){ 
                SetThrottle = 12.5 
                Pod:soundPlay(4,0,Lever_ThrottleNotchDetent)
                soundVolume(5,0.5)
                soundPitch(5,85)
            }
            # snap to notch 0
            if(DecreaseThrottle & SetReverser != 0 & SetThrottle < 12.5 & SetThrottle != 0){ 
                SetThrottle = 0 
                Pod:soundPlay(4,0,Lever_ThrottleNotchDetent)
                soundVolume(5,0.5)
                soundPitch(5,85)
            }
            # end clunk
            if(IncreaseThrottle & SetThrottle == 100 & OldSetThrottle != 100){
                if(Diff > 3){
                    Pod:soundPlay(4,0,Lever_ThrottleEndClunk)
                }else{
                    Pod:soundPlay(4,0,Lever_ThrottleEndSoftClunk)
                }
            }
            if(DecreaseThrottle & SetThrottle == 0 & OldSetThrottle != 0 & Diff > 3){
                Pod:soundPlay(4,0,Lever_ThrottleEndClunk)
            }
            local Fade = IncreaseThrottle | DecreaseThrottle ? 0.25 : 0.75
            soundVolume(5,Diff/25,Fade)
            soundPitch(5,80+(Diff*1.5),Fade)
            Notch = adc(0,100,NumThrottleNotches,SetThrottle)
        }
    }
    
    #Hump Control
    
    SetHumpMul = ->HumpMultiplier ? HumpMultiplier : 1
    
    #Dynamic Brakes
    if((SetThrottle==0) & HasDynamics & (abs(SetReverser)==1)){
        if((SetDynamics==0) & IncreaseDynamics & !DNQ){
            DNQ = 1
            DynaNotch = 0
            SetDynamics = 10
            soundStop(1)
            Pod:soundPlay(1,0.5,Lever_Throttle)
        }elseif((SetDynamics==10) & DecreaseDynamics & !DNQ){
            DNQ = 1
            DynaNotch = -1
            SetDynamics = 0
            soundStop(1)
            Pod:soundPlay(1,0.5,Lever_Throttle)
        }
        
        if(Dynamics & NotchedDynamics){
            if(IncreaseDynamics & !DNQ & (DynaNotch<NumThrottleNotches)){
                DNQ = 1
                DynaNotch++
                soundStop(1)
                Pod:soundPlay(1,0.5,Lever_Throttle)
            }elseif(DecreaseDynamics & !DNQ & (DynaNotch>-1)){
                DNQ = 1
                DynaNotch--
                soundStop(1)
                Pod:soundPlay(1,0.5,Lever_Throttle)
            }
            if(DynaNotch>-1){SetDynamics = dac(10,100,NumThrottleNotches,DynaNotch)}
        }elseif(Dynamics){
            if(IncreaseDynamics & (SetDynamics<100) & !DNQ){
                SetDynamics++
                if(SetDynamics>100){SetDynamics=100}
            }elseif(DecreaseDynamics & (SetDynamics>10)){
                DNQ = 1
                SetDynamics--
                if(SetDynamics<10){SetDynamics=10,DNQ=1}
            }
            DynaNotch = adc(10,100,NumThrottleNotches,SetDynamics)
        }
        if(!IncreaseDynamics & !DecreaseDynamics & DNQ){
            DNQ = 0
        }
    }
    
    #Selector
    if((TransitionMode==1) & (TransitionControlType<2)){
        if(SelectorUp & !SelectorQ){
            SelectorQ = 1
            if(!Dynamics & (SetSelector<4)){
                SetSelector++
                soundStop(1)
                Pod:soundPlay(1,0.5,Lever_Throttle)
            }
        }elseif(SelectorDown & !SelectorQ){
            SelectorQ = 1
            if(!Dynamics & (SetSelector>0)){
                SetSelector--
                soundStop(1)
                Pod:soundPlay(1,0.5,Lever_Throttle)
            }
        }elseif(!SelectorUp & !SelectorDown & SelectorQ){
            SelectorQ = 0
        }
        
    }
    
    #Reverser
    
    if((SetThrottle==0) & (!Dynamics)){
        if(ReverserF & !RevQ & (SetReverser<1) & (SetSelector<=1)){
            RevQ = 1
            SetReverser++
            soundStop(1)
            Pod:soundPlay(1,0.5,(SetReverser==0) ? Lever_ReverserN : Lever_ReverserF)
            timer(SetReverser == 0 ? "air_center" : "air_set",150)
        }elseif(ReverserB & !RevQ & (SetReverser>-1) & (SetSelector<=1)){
            RevQ = 1
            SetReverser--
            soundStop(1)
            Pod:soundPlay(1,0.5,(SetReverser==0) ? Lever_ReverserN : Lever_ReverserB)
            timer(SetReverser == 0 ? "air_center" : "air_set",150)
        }elseif(!ReverserF & !ReverserB & RevQ){
            RevQ = 0
        }
    }
    
    #Train Brakes
    local FSP = FeedPressure*64/90 #Full Service Point
    
    if(AirBrakeMode==4){ #6SL
        #0-Release
        #1-Running
        #2-Holding
        #3-Lap
        #4-Service
        #6-Emergency
        if(IncreaseTrainBrake & (SetBrakeNotch < 4) & !ABQ){
            ABQ = 1
            SetBrakeNotch++
            soundStop(1)
            Pod:soundPlay(1,0.5,Lever_24RL)
            if(SetBrakeNotch==4 & (SetEqualRes>FSP) & !HissQ){
                HissQ = 1
                Pod:soundPlay(2,6,AirBrakeApply)
                timer("EndHiss",6000)
            }
        }elseif(DecreaseTrainBrake & (SetBrakeNotch > 0) & !ABQ){
            ABQ = 1
            if(SetBrakeNotch==6){
                SetBrakeNotch=4
            }else{
                SetBrakeNotch--
            }
            soundStop(1)
            Pod:soundPlay(1,0.5,Lever_24RL)
            if(SetBrakeNotch<=1 & (SetEqualRes<FeedPressure) & !HissQ){
                HissQ = 1
                Pod:soundPlay(2,6,AirBrakeRelease)
                timer("EndHiss",6000)
            }
        }elseif(!IncreaseTrainBrake & !DecreaseTrainBrake & ABQ){
            #soundStop(3)
            ABQ = 0
        }
        switch(SetBrakeNotch){
            case 0, #Release
                if(SetEqualRes<FeedPressure){
                    SetEqualRes+=0.5
                    if(SetEqualRes>FeedPressure){SetEqualRes=FeedPressure}
                }
                break
            case 1, #Running
                if(SetEqualRes<FeedPressure){
                    SetEqualRes+=0.5
                    if(SetEqualRes>FeedPressure){SetEqualRes=FeedPressure}
                }
                break
            case 2, #Holding
                if(SetEqualRes<FeedPressure){
                    SetEqualRes+=0.5
                    if(SetEqualRes>FeedPressure){SetEqualRes=FeedPressure}
                }
                break
            case 4, #Service
                if(SetEqualRes>FSP){
                    SetEqualRes-=0.5
                    if(SetEqualRes<FSP){SetEqualRes=FSP}
                }
                break
            default,
                break
        }
    }elseif(AirBrakeMode==3){ #24RL
        #0-Release
        #1-Running
        #2-First Service
        #3-Lap
        #4-Service
        #6-Emergency
        if(IncreaseTrainBrake & (SetBrakeNotch < 4) & !ABQ){
            ABQ = 1
            SetBrakeNotch++
            soundStop(1)
            Pod:soundPlay(1,0.5,Lever_24RL)
            if(SetBrakeNotch==4 & (SetEqualRes>FSP) & !HissQ){
                HissQ = 1
                Pod:soundPlay(2,6,AirBrakeApply)
                timer("EndHiss",6000)
            }elseif(SetBrakeNotch==2 & (SetEqualRes>(FeedPressure-InitialReduction))){
                SetEqualRes = FeedPressure-InitialReduction
                HissQ = 1
                Pod:soundPlay(2,6,AirBrakeApply)
                timer("EndHiss",6000)
            }
        }elseif(DecreaseTrainBrake & (SetBrakeNotch > 0) & !ABQ){
            ABQ = 1
            if(SetBrakeNotch==6){
                SetBrakeNotch=4
            }else{
                SetBrakeNotch--
            }
            soundStop(1)
            Pod:soundPlay(1,0.5,Lever_24RL)
            if(SetBrakeNotch<=1 & (SetEqualRes<FeedPressure) & !HissQ){
                HissQ = 1
                Pod:soundPlay(2,6,AirBrakeRelease)
                timer("EndHiss",6000)
            }
        }elseif(!IncreaseTrainBrake & !DecreaseTrainBrake & ABQ){
            #soundStop(3)
            ABQ = 0
        }
        switch(SetBrakeNotch){
            case 0, #Release
                if(SetEqualRes<FeedPressure){
                    SetEqualRes+=0.5
                    if(SetEqualRes>FeedPressure){SetEqualRes=FeedPressure}
                }
                break
            case 1, #Running
                if(SetEqualRes<FeedPressure){
                    SetEqualRes+=0.5
                    if(SetEqualRes>FeedPressure){SetEqualRes=FeedPressure}
                }
                break
            case 4, #Service
                if(SetEqualRes>FSP){
                    SetEqualRes-=0.5
                    if(SetEqualRes<FSP){SetEqualRes=FSP}
                }
                break
            default,
                break
        }
        
    }elseif(AirBrakeMode==2){#26L
    #0-Release
    #1-Minimum Reduction / Service
    #2-Suppression
    #6-Emergency
        if(IncreaseTrainBrake){
            if(!ABQ){
                ABQ = 1
                if(SetBrakeNotch==0){
                    Lock_26L = 1
                    SetBrakeNotch=1
                    soundStop(1)
                    Pod:soundPlay(1,0.5,Lever_24RL)
                    SetEqualRes = FeedPressure-InitialReduction
                }elseif((SetBrakeNotch==1) & (SetEqualRes>FSP)){
                    soundStop(1)
                    Pod:soundPlay(1,0.5,Lever_26L)
                }elseif((SetBrakeNotch==1) & (SetEqualRes==FSP)){
                    SetBrakeNotch=2
                    soundStop(1)
                    Pod:soundPlay(1,0.5,Lever_24RL)
                    Suppression = 1
                }
                if(!HissQ & (SetEqualRes>FSP)){
                    HissQ = 1
                    Pod:soundPlay(2,6,AirBrakeApply)
                    timer("EndHiss",6000)
                }
            }
            if((SetBrakeNotch==1) & (SetEqualRes>FSP) & !Lock_26L){
                SetEqualRes-=0.5
                if(SetEqualRes<FSP){SetEqualRes=FSP}
            }
        }elseif(DecreaseTrainBrake){
            if(!ABQ){
                ABQ = 1
                if((SetBrakeNotch==1) & (SetEqualRes==(FeedPressure-InitialReduction))){
                    SetBrakeNotch=0
                    soundStop(1)
                    Pod:soundPlay(1,0.5,Lever_24RL)
                    SetEqualRes = FeedPressure
                    if(!HissQ){
                        HissQ = 1
                        Pod:soundPlay(2,6,AirBrakeRelease)
                        timer("EndHiss",6000)
                    }
                }elseif((SetBrakeNotch==1) & (SetEqualRes<FeedPressure)){
                    soundStop(1)
                    Pod:soundPlay(1,0.5,Lever_26L)
                    if(!HissQ & (SetEqualRes<FeedPressure)){
                        HissQ = 1
                        Pod:soundPlay(2,6,AirBrakeRelease)
                        timer("EndHiss",6000)
                    }
                }elseif((SetBrakeNotch==2)){
                    Lock_26L = 1
                    SetBrakeNotch=1
                    soundStop(1)
                    Pod:soundPlay(1,0.5,Lever_24RL)
                    Suppression = 0
                }elseif(SetBrakeNotch==6){
                    SetBrakeNotch=2
                    soundStop(1)
                    Pod:soundPlay(1,0.5,Lever_24RL)
                    Suppression = 1
                }
                
            }
            if((SetBrakeNotch==1) & (SetEqualRes<(FeedPressure-InitialReduction)) & !Lock_26L){
                SetEqualRes+= 1.5 #Triple Release Speed
                if(SetEqualRes>=(FeedPressure-InitialReduction)){
                    SetEqualRes = FeedPressure - InitialReduction
                    ABQ = 0
                    }
            }
        }elseif(!IncreaseTrainBrake & !DecreaseTrainBrake & ABQ){
            ABQ = 0
            Lock_26L = 0
        }
    }elseif(AirBrakeMode==1){#Simple Manual Lapping
    #0-Release
    #1-Lap
    #2-Apply
    #6-Emergency
        if(IncreaseTrainBrake & !ABQ & (SetBrakeNotch<2)){
            ABQ = 1
            SetBrakeNotch++
            soundStop(1)
            Pod:soundPlay(1,0.5,Lever_24RL)
            if((SetBrakeNotch==2) & (SetEqualRes>FSP) & !HissQ){
                HissQ = 1
                Pod:soundPlay(2,6,AirBrakeApply)
                timer("EndHiss",6000)
            }
        }elseif(DecreaseTrainBrake & !ABQ & (SetBrakeNotch>0)){
            ABQ = 1
            if(SetBrakeNotch==6){
                SetBrakeNotch=2
            }else{
                SetBrakeNotch--
            }
            soundStop(1)
            Pod:soundPlay(1,0.5,Lever_24RL)
            if((SetBrakeNotch==0) & (SetEqualRes<FeedPressure) & !HissQ){
                HissQ = 1
                Pod:soundPlay(2,6,AirBrakeRelease)
                timer("EndHiss",6000)
            }
        }elseif(!IncreaseTrainBrake & !DecreaseTrainBrake & ABQ){
            ABQ = 0
        }
        

        if((SetBrakeNotch==2) & (SetEqualRes>FSP)){
            SetEqualRes-=0.25
            if(SetEqualRes<FSP){SetEqualRes=FSP}
        }elseif((SetBrakeNotch==0) & (SetEqualRes<FeedPressure)){
            SetEqualRes+=0.25
            if(SetEqualRes>FeedPressure){SetEqualRes=FeedPressure}
        }
        
    }else{#Simple Self Lapping
            
    #Lol what notches?
    #0-Service Region
    #6-Emergency
        if(IncreaseTrainBrake & !ABQ){
            ABQ = 1
            soundStop(1)
            Pod:soundPlay(1,0.5,Lever_26L)
            if((SetEqualRes>FSP) & !HissQ){
                HissQ = 1
                Pod:soundPlay(2,6,AirBrakeApply)
                timer("EndHiss",6000)
            }
        }elseif(DecreaseTrainBrake & !ABQ){
            ABQ = 1
            if(SetBrakeNotch==6){
                SetBrakeNotch = 0
                soundStop(1)
                Pod:soundPlay(1,0.5,Lever_24RL)
            }else{
                soundStop(1)
                Pod:soundPlay(1,0.5,Lever_26L)
                if((SetEqualRes<FeedPressure) & !HissQ){
                    HissQ = 1
                    Pod:soundPlay(2,6,AirBrakeRelease)
                    timer("EndHiss",6000)
                }
            }
        }elseif(!IncreaseTrainBrake & !DecreaseTrainBrake & ABQ){
            ABQ = 0
        }

            
        if(IncreaseTrainBrake & (SetEqualRes>FSP)){
            SetEqualRes-=0.25
            BleedPressure = Bleeding ? 0 : FeedPressure
            if(SetEqualRes<FSP){SetEqualRes=FSP}
        }elseif(DecreaseTrainBrake & (SetEqualRes<FeedPressure)){
            SetEqualRes+=0.25
            if(SetEqualRes>FeedPressure){SetEqualRes=FeedPressure}
        }
        
    }
    
    #Locomotive Brakes
    if(!LocoBrakeMode){ #Self Lapping
        if(IncreaseLocoBrake & (SetLocoBrakePressure<60)){
            #if(BleedPressure<72){BleedPressure=72}
            if(!LBQ){LBQ=1}
            SetLocoBrakePressure+=2
            if(SetLocoBrakePressure>60){
                SetLocoBrakePressure = 60
            }
            if(SetLocoBrakePressure==60 & !LHissQ){
                LHissQ = 1
                soundStop(1)
                Pod:soundPlay(1,0.5,LocoBrakeFull)
                timer("EndHiss",500)
            }
        }elseif(DecreaseLocoBrake & (SetLocoBrakePressure>0)){
            if(!LBQ){LBQ=1}
            SetLocoBrakePressure-=2
            if(SetLocoBrakePressure<0){SetLocoBrakePressure = 0}
            if(!LHissQ){
                LHissQ = 1
                Pod:soundPlay(2,6,(SetLocoBrakePressure>30) ? LocoBrakeReleaseHard : LocoBrakeReleaseSoft)
                timer("EndHiss",6000)
            }
        }elseif(DecreaseLocoBrake & (SetLocoBrakePressure==0) & !LBQ){
            LBQ = 1
            SetBleeding = 1
            if((SetEqualRes<FeedPressure) & !LHissQ){
                LHissQ = 1
                Pod:soundPlay(2,6,(SetEqualRes<30) ? LocoBrakeReleaseHard : LocoBrakeReleaseSoft)
                timer("EndHiss",6000)
            }
        }elseif(!IncreaseLocoBrake & !DecreaseLocoBrake & LBQ){
            LBQ = 0
            SetBleeding = 0
        }

    }else{ #Manual Lapping
            
        if(IncreaseLocoBrake & !LBQ & (SetLocoBrakeNotch<2)){
            LBQ = 1
            SetLocoBrakeNotch++
            if(SetLocoBrakeNotch==2){
                soundStop(1)
                Pod:soundPlay(1,0.5,LocoBrakeFull)
                #BleedPressure = 72
            }
        }elseif(DecreaseLocoBrake & !LBQ & (SetLocoBrakeNotch>0)){
            LBQ = 1
            SetLocoBrakeNotch--
            if((SetLocoBrakeNotch<=0) & (SetLocoBrakePressure>0) & !LHissQ){
                LHissQ = 1
                Pod:soundPlay(2,6,(SetLocoBrakePressure>30) ? LocoBrakeReleaseHard : LocoBrakeReleaseSoft)
                timer("EndHiss",6000)
            }
        }elseif(DecreaseLocoBrake & !LBQ & (SetLocoBrakeNotch==0)){
            LBQ = 1
            SetBleeding = 1
            if((SetLocoBrakeNotch<=0) & (SetEqualRes<FeedPressure) & !LHissQ){
                LHissQ = 1
                Pod:soundPlay(2,6,(SetEqualRes<60) ? LocoBrakeReleaseHard : LocoBrakeReleaseSoft)
                timer("EndHiss",6000)
            }
        }elseif(!IncreaseLocoBrake & !DecreaseLocoBrake & LBQ){
            LBQ = 0
            SetBleeding = 0
            
        }
       
        if(SetBleeding & (SetLocoBrakePressure>0)){
            SetLocoBrakePressure-=4
            if(SetLocoBrakePressure<0){SetLocoBrakePressure=0}
        }elseif((SetLocoBrakeNotch==2) & (SetLocoBrakePressure<60)){
            SetLocoBrakePressure+=2
            if(SetLocoBrakePressure>60){SetLocoBrakePressure=60}
        }elseif((SetLocoBrakeNotch<=0) & (SetLocoBrakePressure>0)){
            SetLocoBrakePressure-=2
            if(SetLocoBrakePressure<0){SetLocoBrakePressure=0}
        }
        
    }
    
    #Emergency Brake
    
    if(EmergencyBrake | EmBrake){

        SetEqualRes = 0
        
        SetThrottle = 0
        Notch = 0
        SetDynamics = 0
        DynaNotch = 0
        #SetLocoBrakePressure = 72
        SetBrakeNotch = 6
        
    }
        
    #Control Stand
    
    #Hooloos
    local Ang = 0
    
    #Toaster Pitch (Reverser)
    if(SetReverser==1){
        #Ang = -3.75
        Ang = -10
    }elseif(SetReverser==-1){
        #Ang = 3.75
        Ang = 10
    }else{
        Ang = 0
    }
    #lever(4,Ang,5)
    
    #Toaster Yaw (Throttle)
    local Ang2 = 6.5 - SetThrottle*19.5/100
    lever(5,Ang2,Ang,2)
    
    #Ang = 67.5 - SetThrottle*90/100
    #lever(9,Ang,5)
    
    #Selector and Selector Wheel
    #if(SetDynamics>0){
    #    Ang = 10 + (SetDynamics-10)*45/90
    #}elseif(SetSelector==0){
    #    Ang = 0
    #}else{
    #    Ang = -30 - SetSelector*10
    #}
    #lever(6,Ang,5)
    
    #if(SetDynamics>0){
    #    Ang = 150.75 + (SetDynamics-10)*45/90
    #}else{
    #    Ang = 140 - SetSelector*11.375
    #}
    #lever(10,Ang,5)
    
    #Automatic Brake
    Ang = select(SetBrakeNotch+1, -66, -45, -27.7, 0, 21, 43)
    local Speed = (SetBrakeNotch==6) ? 15 : 5
    lever(7,Ang,Speed)
    
    #Locomotive Brake
    if(SetBleeding | (LocoBrakePitch!=0)){
        lever(8,-45,5)
        holoBodygroup(8,0,5)
    }else{
        lever(8,-45 + 105*SetLocoBrakePressure/60,15)
        holoBodygroup(8,0,4)
    }
    
    #Bell
    lever(11,Bell*45,15)
    
    #Sander
    Ang = 45*ForceSand*(SetReverser==-1 ? -1 : 1)
    lever(12,Ang,15)
    
    #Brake Cut-Out
    lever2(13,180 - BrakeCutIn*90,15)

Gauges:setBoneAngRelative(MRNeedle,ang(10-MainRes*1.2,0,0))
Gauges:setBoneAngRelative(ERNeedle,ang(10-EqualRes*1.32,0,0))
Gauges:setBoneAngRelative(LoadNeedle,ang(-80-Load1/21.5,0,0))
Gauges:setBonePosRelative(LoadNeedle,vec(0,0.1,-0.77))
Gauges:setBoneAngRelative(CylNeedle,ang(10-Cyl*1.11,0,0))
Gauges:setBoneAngRelative(BPNeedle,ang(10-BrakePipe*1.35,0,0))
Gauges:setBoneAngRelative(BattAmpsNeedle,ang(-125+EngineStart*8-On1*10-EngineSpeed1,0,0))
Gauges:setBonePosRelative(BattAmpsNeedle,vec(0,0.1,-0.5))
Gauges:setBoneAngRelative(TempNeedle,ang(10-Temperature*3,0,0))
Gauges:setBoneAngRelative(ManifoldPSINeedle,ang(10-On1*10-EngineSpeed1*24.55,0,0))
Gauges:setBoneAngRelative(OilPSINeedle,ang(10-Primed1*10-On1*8-EngineSpeed1*3,0,0))

Buttons:setBodygroup(2,HighPower)
Buttons:setBodygroup(3,LowPower)

Buttons:setBodygroup(4,ClassLightsF)
Buttons:setBodygroup(5,StepLights)
Buttons:setBodygroup(6,ClassLightsR)
Buttons:setBodygroup(7,CabLights)
Buttons:setBodygroup(8,FuelPump)
Buttons:setBodygroup(9,HoodLights)

if(FrontHeadLightDim>0){
Buttons:setBodygroup(10,1)
LightFBrightness = 1
}elseif(FrontHeadLightDim==0){
Buttons:setBodygroup(10,0)}

if(FrontHeadLightMed>0){
Buttons:setBodygroup(11,1)
LightFBrightness = 3
}elseif(FrontHeadLightMed==0){
LightFBrightness = 1
Buttons:setBodygroup(11,0)}

if(FrontHeadLightBrt>0){
Buttons:setBodygroup(12,1)
LightFBrightness = 6
}elseif(FrontHeadLightBrt==0){
LightFBrightness = 3
Buttons:setBodygroup(12,0)}

if(RearHeadLightDim>0){
Buttons:setBodygroup(13,1)
LightRBrightness = 1
}elseif(RearHeadLightDim==0){
Buttons:setBodygroup(13,0)}

if(RearHeadLightMed>0){
LightRBrightness = 3
Buttons:setBodygroup(14,1)
}elseif(RearHeadLightMed==0){
LightRBrightness = 1
Buttons:setBodygroup(14,0)}

if(RearHeadLightBrt>0){
LightRBrightness = 6
Buttons:setBodygroup(15,1)
}elseif(RearHeadLightBrt==0){
LightRBrightness = 3
Buttons:setBodygroup(15,0)}



Buttons:setBodygroup(16,EngineStart)
Buttons:setBodygroup(17,EngineStop)
Buttons:setBodygroup(18,1)
Buttons:setBodygroup(19,2+Isolation)
Buttons:setBodygroup(20,GroundReset)
    
    #Horn 1
    if(HornType){
        local Hpos1 = CS:toWorld(C1P)
        local Hang1 = CS:toWorld(C1A)
        #CordDir1 = CS:toLocal(Hang1:forward())
        #rangerFilter(CS)
        local Hpos2 = CS:toWorld(CordAnchor1)
        local PFactor = Quill1 ? 0.5*Horn1 : Horn1
        local Hpos3 = linpos(Hpos1,Hpos2,DongleHeight) + Hang1:forward()*(CordExtendLength/4 + PullLength*PFactor) - Hang1:up()*PullLength*PFactor*DownRatio
        #local Haxis1 = (Hpos2-Hpos1)
        local Length1 = Hpos1:distance(Hpos3)
        local Ang1 = -heading(Hpos1,ang(),Hpos3)
        local Ang1a = Ang1:rotateAroundAxis(Ang1:right(),-90)
        local Length2 = Hpos2:distance(Hpos3)
        local Ang2 = -heading(Hpos3,ang(),Hpos2)
        local Ang2a = Ang2:rotateAroundAxis(Ang2:right(),-90)
        
        #holoCreate(6,linpos(Hpos1,Hpos3,0.5),vec(0.25,0.25,(Length1/60)),Ang1a,vec(255,225,127),"models/sprops/cylinders/size_1/cylinder_1_5x60.mdl")
        #holoCreate(7,linpos(Hpos2,Hpos3,0.5),vec(0.25,0.25,(Length2/60)),Ang2a,vec(255,225,127),"models/sprops/cylinders/size_1/cylinder_1_5x60.mdl")
        holoScale(1,vec(0.125,0.125,(Length1/60)))
        holoScale(2,vec(0.125,0.125,(Length2/60)))
        holoPos(1,linpos(Hpos1,Hpos3,0.5))
        holoPos(2,linpos(Hpos2,Hpos3,0.5))
        holoPos(3,Hpos3 + 1*Ang2a:up())
        holoAng(1,Ang1a)
        holoAng(2,Ang2a)
    }else{
        CS:setBodygroup(6,Horn1 ? 2-Quill1 : 0)
    }
    #Horn 2 Unused
    #CS:setBodygroup(1,MU_Master ? SetReverser+2 : 0)
    
    timer("clk",50)
}elseif(clk("EndHiss")){
    HissQ = 0
    LHissQ = 0
}elseif(clk("PenaltyTimeout")){
    PenaltyBrake = 0   
}elseif(clk("air_set")){ Pod:soundPlay(6,1,AirReverser_Set)
}elseif(clk("air_center")){ Pod:soundPlay(6,1,AirReverser_Center) }

local InRelease = ((AirBrakeMode==3)|(AirBrakeMode==4)) & (SetBrakeNotch==0)
if(InRelease & !WarningHissQ){
    WarningHissQ = 1
    CS:soundPlay(3,0,WarningHiss)
}elseif(!InRelease & WarningHissQ){
    WarningHissQ = 0
    soundStop(3,0.125)
}

CtlTable["SetReverser",number] = SetReverser
CtlTable["SetThrottle",number] = clamp(SetThrottle,0,100)
CtlTable["SetDynamics",number] = SetDynamics
CtlTable["SetSelector",number] = SetSelector
CtlTable["SetBrakeNotch",number] = SetBrakeNotch
CtlTable["SetEqualRes",number] = SetEqualRes
CtlTable["SetHolding",number] = (AirBrakeMode==4)&(SetBrakeNotch==2)
CtlTable["Overcharge",number] = (SetBrakeNotch==0) & ((AirBrakeMode==3)|(AirBrakeMode==4))
CtlTable["FRC",number] = FullReleaseCock
#CtlTable["SetLocoBrakeNotch",number] = SetLocoBrakeNotch
CtlTable["SetLocoBrakePressure",number] = SetLocoBrakePressure
CtlTable["SetBleeding",number] = SetBleeding
CtlTable["SetHumpMultiplier",number] = SetHumpMul
CtlTable["SetFeedPressure",number] = FeedPressure

CtlTable["EmergencyBrake",number] = EmergencyBrake
CtlTable["HandBrake",number] = HandBrake
CtlTable["Sander",number] = Sander

if(chatClk(owner())|chatClk(Pod:driver())){
    local Speaker = lastSpoke()
    local Sentence = Speaker:lastSaid():explode(" ")
    local CMD_PreNum = Sentence[1,string]
    local CMD_S = CMD_PreNum:explode(":")
    local CMD = CMD_S[1,string]
    local NumberGiven = CMD_S[2,string]
    local Num = Number:trim()
    
    local OnRun = 1#(On1 & Run)|(On2 & Run_DPM)
    
    
    if((NumberGiven==Num) | NumberGiven==""){
        switch(CMD){
            case ".controls",
                if(MU_Master){
                    for(K=1,ControlPrintOrder:count()){
                        local ControlName = ControlPrintOrder[K,string]
                        local X = Controls[ControlName,string]
                        if(Routing[ControlName,number]){
                            Speaker:printProper(ControlName + ": Shift + " + X)
                        }else{
                            Speaker:printProper(ControlName + ": " + X)
                        }
                    }
                }
                hideChat(1)
                break
            case ".reverser",
                if(MU_Master & OnRun){
                    if(Dynamics){
                        Speaker:printProper("[RLCPT] Dynamic Brakes are On!")
                    }elseif(SetThrottle>0){
                        Speaker:printProper("[RLCPT] Throttle is On!")
                    }else{
                        SetReverser = sign(Sentence[2,string]:toNumber())
                        Speaker:printProper("[RLCPT] Reverser set to " + SetReverser:toString() + ".")
                    }
                }
                hideChat(1)
                break
            case ".throttle",
                if(MU_Master & OnRun){
                    if(Dynamics){
                        Speaker:printProper("[RLCPT] Dynamic Brakes are On!")
                    }elseif(HEP_Notch==1){
                        Speaker:printProper("[RLCPT] HEP Mode is in Standby!")
                    }else{
                        if(NotchedThrottle){
                            SetThrottle = clamp(dac(0,100,NumThrottleNotches,adc(0,100,NumThrottleNotches,Sentence[2,string]:toNumber())),0,100)
                            Notch = adc(0,100,NumThrottleNotches,SetThrottle)
                        }else{
                            SetThrottle = clamp(Sentence[2,string]:toNumber(),0,100)
                            Notch = adc(0,100,NumThrottleNotches,SetThrottle)
                        }
                        Speaker:printProper("[RLCPT] Throttle set to " + SetThrottle + "%.")
                    }
                }
                hideChat(1)
                break
            case ".notch",
                if(MU_Master & OnRun){
                    if(Dynamics){
                        Speaker:printProper("[RLCPT] Dynamic Brakes are On!")
                    }elseif(HEP_Notch==1){
                        Speaker:printProper("[RLCPT] HEP Mode is in Standby!")
                    }else{
                        if(NotchedThrottle){
                            Notch = clamp(round(Sentence[2,string]:toNumber()),0,NumThrottleNotches)
                            SetThrottle = dac(0,100,NumThrottleNotches,Notch)
                            Speaker:printProper("[RLCPT] Throttle set to Notch " + Notch + ".")
                            
                        }else{
                            Speaker:printProper("[RLCPT] Throttle has no Notches!")
                        }
                        
                    }
                }
                hideChat(1)
                break
            case ".dynamics",
                if(MU_Master & OnRun){
                    if(!HasDynamics){
                        Speaker:printProper("[RLCPT] Dynamic Brakes are not Enabled!")
                    }elseif(!abs(SetReverser)){
                        Speaker:printProper("[RLCPT] Reverser is not Engaged!")
                    }elseif(SetThrottle>0){
                        Speaker:printProper("[RLCPT] Throttle is not in Idle!")
                    }else{
                        local Set = clamp(Sentence[2,string]:toNumber(),0,100)
                        SetDynamics = (Set<10) ? 0 : Set
                        DynaNotch = (SetDynamics==0) ? -1 : adc(10,100,NumThrottleNotches,SetDynamics)
                        
                        #Dynamics = DynamicBrakingPower>0
                        
                        Speaker:printProper("[RLCPT] Dynamic Brake set to " + SetDynamics + "%.")
                    }
                }
                hideChat(1)
                break
            case ".dynanotch",
                if(MU_Master & OnRun){
                    if(NotchedDynamics){
                        if(!HasDynamics){
                            Speaker:printProper("[RLCPT] Dynamic Brakes are not Enabled!")
                        }elseif(!abs(SetReverser)){
                            Speaker:printProper("[RLCPT] Reverser is not Engaged!")
                        }elseif(SetThrottle>0){
                            Speaker:printProper("[RLCPT] Throttle is not in Idle!")
                        }else{
                            local Set = clamp(round(Sentence[2,string]:toNumber()),-1,NumThrottleNotches)
                            DynaNotch = Set
                            SetDynamics = (Set==-1) ? 0 : dac(10,100,NumThrottleNotches,DynaNotch)
                            
                            #Dynamics = DynamicBrakingPower>0
                            
                            Speaker:printProper("[RLCPT] Dynamic Brake set to Notch " + DynaNotch + " (" + SetDynamics + "%).")
                        }
                    }else{
                        Speaker:printProper("[RLCPT] Dynamic Brakes are not Notched!")
                    }
                }
                hideChat(1)
                break
            case ".abset",
                if(MU_Master & OnRun){
                    local What = Sentence[2,string]
                    if(What==""){
                        SetEqualRes = 0
                    				SetThrottle = 0
                    				Notch = 0
                    				SetDynamics = 0
                    				SetBrakeNotch = 6
                        Speaker:printProper("[RLCPT] Setting Emergency Brake application!")
                    }else{
                        local Set = clamp(What:toNumber(),0,FeedPressure*64/90)
                        switch(AirBrakeMode){
                            case 4, #6SL
                                if(Set==0){
                                    SetEqualRes = FeedPressure
                                    SetBrakeNotch = 1
                                }else{
                                    SetEqualRes = FeedPressure - Set
                                    SetBrakeNotch = 3
                                }
                                break
                            case 3, #24RL
                                if(Set==0){
                                    SetEqualRes = FeedPressure
                                    SetBrakeNotch = 1
                                }elseif(Set<InitialReduction){
                                    SetEqualRes = FeedPressure - InitialReduction
                                    SetBrakeNotch = 2
                                }else{
                                    SetEqualRes = FeedPressure - Set
                                    SetBrakeNotch = 3
                                }
                                break
                            case 2, #26L
                                if(Set==0){
                                    SetEqualRes = FeedPressure
                                    SetBrakeNotch = 0
                                }elseif(Set<InitialReduction){
                                    SetEqualRes = FeedPressure - InitialReduction
                                    SetBrakeNotch = 1
                                }else{
                                    SetEqualRes = FeedPressure - Set
                                    SetBrakeNotch = 1
                                }
                                break
                            case 1, #SML
                                SetBrakeNotch = 1
                                SetEqualRes = FeedPressure - Set
                                break
                            case 0, #SSL
                                SetBrakeNotch = 0
                                SetEqualRes = FeedPressure - Set
                                break
                        }
                        Speaker:printProper("[RLCPT] Setting " + (FeedPressure-SetEqualRes) + "lb application on train.")
                    }
                }
                hideChat(1)
                break
			case ".brake",
				if(MU_Master & OnRun){
					SetEqualRes = 0
					SetThrottle = 0
					Notch = 0
					SetDynamics = 0
					SetBrakeNotch = 6
					Speaker:printProper("[RLCPT] Setting Emergency Brake application!")
				}
				hideChat(1)
				break
            case ".lbset",
                local Set = clamp(Sentence[2,string]:toNumber(),0,72)
                local ML = (AirBrakeMode==1)|(AirBrakeMode==3)|(AirBrakeMode==4)
                SetLocoBrakePressure = Set
                if(ML){SetLocoBrakeNotch=1}
                Speaker:printProper("[RLCPT] Setting " + (SetLocoBrakePressure) + "lb application on locomotive(s).")
                
                hideChat(1)
                break
            case ".remotemode",
                if(MU_Master){
                    RemoteMode = sign(Sentence[2,string]:toNumber())
                    Speaker:printProper("[RLCPT] Remote Control Mode set to " + RemoteMode + ".")
                    hideChat(1)
                }
                break
            case ".feedvalve",
                if(Sentence[2,string]==""){
                    print("[RLCPT] Your Feed Valve is currently set to "+FeedPressure+" PSI.")
                }else{
                    FeedPressure = clamp(Sentence[2,string]:toNumber(),70,120)
                    print("[RLCPT] Your Feed Valve is now set to "+FeedPressure+" PSI.")
                }
                hideChat(1)
                break
            case ".fullreleasecock",
                if(AirBrakeMode==3){
                    if(Sentence[2,string]==""){
                        FullReleaseCock = 0
                    }else{
                        FullReleaseCock = Sentence[2,string]:toNumber()
                    }
                    print("[RLCPT] Your Full Release Cock is now set to " + (FullReleaseCock ? "MR (1)." : "FV (0)."))
                }else{
                    print("[RLCPT] You don't have a Full Release Cock!")
                }
                
                hideChat(1)
                break
            default,
                if(CMD:index(1)=="."){
                    local CMDL = CMD:lower()
                    if("abcdefghijklmnopqrstuvwxyz":find(CMDL:index(2))){
                        hideChat(1)
                    }
                }
                break
        }
    }
    
}
if(LightToggleF & ~LightToggleF){
    LightF = !LightF
    CS:soundPlay(0,1,"buttons/lightswitch2.wav")
}
if(LightToggleR & ~LightToggleR){
    LightR = !LightR
    CS:soundPlay(0,1,"buttons/lightswitch2.wav")
}
if(BellToggle & ~BellToggle){
    Bell = !Bell
    CS:soundPlay(0,1,Bell ? "gsgtrainsounds/misc/air_on.wav" : "gsgtrainsounds/misc/air_off.wav")
}
if(MiscToggle & ~MiscToggle){
    Misc = !Misc
}


